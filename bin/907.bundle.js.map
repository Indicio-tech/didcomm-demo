{"version":3,"file":"907.bundle.js","mappings":";qGA4HAA,EAAOC,QAtHP,SAAeC,GACb,GAAIA,EAASC,QAAU,IAAO,MAAM,IAAIC,UAAU,qBAElD,IADA,IAAIC,EAAW,IAAIC,WAAW,KACrBC,EAAI,EAAGA,EAAIF,EAASF,OAAQI,IACnCF,EAASE,GAAK,IAEhB,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAASC,OAAQK,IAAK,CACxC,IAAIC,EAAIP,EAASQ,OAAOF,GACpBG,EAAKF,EAAEG,WAAW,GACtB,GAAqB,MAAjBP,EAASM,GAAe,MAAM,IAAIP,UAAUK,EAAI,iBACpDJ,EAASM,GAAMH,CACjB,CACA,IAAIK,EAAOX,EAASC,OAChBW,EAASZ,EAASQ,OAAO,GACzBK,EAASC,KAAKC,IAAIJ,GAAQG,KAAKC,IAAI,KACnCC,EAAUF,KAAKC,IAAI,KAAOD,KAAKC,IAAIJ,GA8CvC,SAASM,EAAcC,GACrB,GAAsB,iBAAXA,EAAuB,MAAM,IAAIhB,UAAU,mBACtD,GAAsB,IAAlBgB,EAAOjB,OAAgB,OAAO,IAAIG,WACtC,IAAIe,EAAM,EAEV,GAAoB,MAAhBD,EAAOC,GAAX,CAIA,IAFA,IAAIC,EAAS,EACTnB,EAAS,EACNiB,EAAOC,KAASP,GACrBQ,IACAD,IAMF,IAHA,IAAIE,GAAUH,EAAOjB,OAASkB,GAAON,EAAU,IAAO,EAClDS,EAAO,IAAIlB,WAAWiB,GAEnBH,EAAOC,IAAM,CAElB,IAAII,EAAQpB,EAASe,EAAOR,WAAWS,IAEvC,GAAc,MAAVI,EAAiB,OAErB,IADA,IAAIjB,EAAI,EACCkB,EAAMH,EAAO,GAAc,IAAVE,GAAejB,EAAIL,KAAqB,IAATuB,EAAaA,IAAOlB,IAC3EiB,GAAUZ,EAAOW,EAAKE,KAAU,EAChCF,EAAKE,GAAQD,EAAQ,MAAS,EAC9BA,EAASA,EAAQ,MAAS,EAE5B,GAAc,IAAVA,EAAe,MAAM,IAAIE,MAAM,kBACnCxB,EAASK,EACTa,GACF,CAEA,GAAoB,MAAhBD,EAAOC,GAAX,CAGA,IADA,IAAIO,EAAML,EAAOpB,EACVyB,IAAQL,GAAsB,IAAdC,EAAKI,IAC1BA,IAIF,IAFA,IAAIC,EAAM,IAAIvB,WAAWgB,GAAUC,EAAOK,IACtCrB,EAAIe,EACDM,IAAQL,GACbM,EAAItB,KAAOiB,EAAKI,KAElB,OAAOC,CAX2B,CA5BA,CAwCpC,CAMA,MAAO,CACLC,OAjGF,SAAiBV,GAOf,GANIA,aAAkBd,aACXyB,YAAYC,OAAOZ,GAC5BA,EAAS,IAAId,WAAWc,EAAOa,OAAQb,EAAOc,WAAYd,EAAOe,YACxDC,MAAMC,QAAQjB,KACvBA,EAASd,WAAWgC,KAAKlB,OAErBA,aAAkBd,YAAe,MAAM,IAAIF,UAAU,uBAC3D,GAAsB,IAAlBgB,EAAOjB,OAAgB,MAAO,GAMlC,IAJA,IAAImB,EAAS,EACTnB,EAAS,EACToC,EAAS,EACTC,EAAOpB,EAAOjB,OACXoC,IAAWC,GAA2B,IAAnBpB,EAAOmB,IAC/BA,IACAjB,IAMF,IAHA,IAAIC,GAASiB,EAAOD,GAAUrB,EAAU,IAAO,EAC3CuB,EAAM,IAAInC,WAAWiB,GAElBgB,IAAWC,GAAM,CAItB,IAHA,IAAIf,EAAQL,EAAOmB,GAEf/B,EAAI,EACCkC,EAAMnB,EAAO,GAAc,IAAVE,GAAejB,EAAIL,KAAqB,IAATuC,EAAaA,IAAOlC,IAC3EiB,GAAU,IAAMgB,EAAIC,KAAU,EAC9BD,EAAIC,GAAQjB,EAAQZ,IAAU,EAC9BY,EAASA,EAAQZ,IAAU,EAE7B,GAAc,IAAVY,EAAe,MAAM,IAAIE,MAAM,kBACnCxB,EAASK,EACT+B,GACF,CAGA,IADA,IAAII,EAAMpB,EAAOpB,EACVwC,IAAQpB,GAAqB,IAAbkB,EAAIE,IACzBA,IAIF,IADA,IAAIC,EAAM9B,EAAO+B,OAAOvB,GACjBqB,EAAMpB,IAAQoB,EAAOC,GAAO1C,EAASQ,OAAO+B,EAAIE,IACvD,OAAOC,CACT,EAsDEzB,aAAcA,EACd2B,OARF,SAAiBC,GACf,IAAId,EAASd,EAAa4B,GAC1B,GAAId,EAAU,OAAOA,EACrB,MAAM,IAAIN,MAAM,WAAad,EAAO,aACtC,EAMF,0ICzHA,QAAe,sDCFf,IAAImC,EACG,SAASC,EAAeC,GAC3BF,EAAOE,CACX,kmBAGA,MAAMC,EAAO,IAAIf,MAAM,KAAKgB,UAAKC,GAIjC,SAASC,EAAUC,GAAO,OAAOJ,EAAKI,EAAM,CAF5CJ,EAAKK,UAAKH,EAAW,MAAM,GAAM,GAIjC,IAAII,EAAYN,EAAKhD,OAQrB,SAASuD,EAAWH,GAChB,MAAMI,EAAML,EAAUC,GAEtB,OATJ,SAAoBA,GACZA,EAAM,MACVJ,EAAKI,GAAOE,EACZA,EAAYF,EAChB,CAIIK,CAAWL,GACJI,CACX,CAEA,IAAIE,EAAkB,EAElBC,EAAqB,KAEzB,SAASC,IAIL,OAH2B,OAAvBD,GAAiE,IAAlCA,EAAmB3B,aAClD2B,EAAqB,IAAIxD,WAAW0C,EAAKgB,OAAO/B,SAE7C6B,CACX,CAIA,IAAIG,EAAoB,IAFoB,oBAAhBC,aAA8B,EAAIlE,EAAOmE,SAAS,QAAQD,YAAcA,aAE3D,SAEzC,MAAME,EAAwD,mBAAjCH,EAAkBI,WACzC,SAAUC,EAAKC,GACjB,OAAON,EAAkBI,WAAWC,EAAKC,EAC7C,EACM,SAAUD,EAAKC,GACjB,MAAMC,EAAMP,EAAkBnC,OAAOwC,GAErC,OADAC,EAAKE,IAAID,GACF,CACHE,KAAMJ,EAAInE,OACVwE,QAASH,EAAIrE,OAErB,EAEA,SAASyE,EAAkBN,EAAKO,EAAQC,GAEpC,QAAgBzB,IAAZyB,EAAuB,CACvB,MAAMN,EAAMP,EAAkBnC,OAAOwC,GAC/BS,EAAMF,EAAOL,EAAIrE,QAGvB,OAFA4D,IAAkBiB,SAASD,EAAKA,EAAMP,EAAIrE,QAAQsE,IAAID,GACtDX,EAAkBW,EAAIrE,OACf4E,CACX,CAEA,IAAIE,EAAMX,EAAInE,OACV4E,EAAMF,EAAOI,GAEjB,MAAMC,EAAMnB,IAEZ,IAAIoB,EAAS,EAEb,KAAOA,EAASF,EAAKE,IAAU,CAC3B,MAAMC,EAAOd,EAAI1D,WAAWuE,GAC5B,GAAIC,EAAO,IAAM,MACjBF,EAAIH,EAAMI,GAAUC,CACxB,CAEA,GAAID,IAAWF,EAAK,CACD,IAAXE,IACAb,EAAMA,EAAIe,MAAMF,IAEpBJ,EAAMD,EAAQC,EAAKE,EAAKA,EAAME,EAAsB,EAAbb,EAAInE,QAC3C,MAAMoE,EAAOR,IAAkBiB,SAASD,EAAMI,EAAQJ,EAAME,GAG5DE,GAFYf,EAAaE,EAAKC,GAEhBI,OAClB,CAGA,OADAd,EAAkBsB,EACXJ,CACX,CAEA,SAASO,EAAW7E,GAChB,OAAOA,OACX,CAEA,IAAI8E,EAAqB,KAEzB,SAASC,IAIL,OAH2B,OAAvBD,GAAiE,IAAlCA,EAAmBpD,aAClDoD,EAAqB,IAAIE,WAAWzC,EAAKgB,OAAO/B,SAE7CsD,CACX,CAIA,IAAIG,EAAoB,IAFoB,oBAAhBC,aAA8B,EAAI3F,EAAOmE,SAAS,QAAQwB,YAAcA,aAE3D,QAAS,CAAEC,WAAW,EAAMC,OAAO,IAI5E,SAASC,EAAmBf,EAAKE,GAC7B,OAAOS,EAAkB5C,OAAOiB,IAAkBiB,SAASD,EAAKA,EAAME,GAC1E,CAEA,SAASc,EAAcC,GACfvC,IAAcN,EAAKhD,QAAQgD,EAAKK,KAAKL,EAAKhD,OAAS,GACvD,MAAMoD,EAAME,EAIZ,OAHAA,EAAYN,EAAKI,GAEjBJ,EAAKI,GAAOyC,EACLzC,CACX,CAEA,SAAS0C,EAAY/C,GAEjB,MAAMgD,SAAchD,EACpB,GAAY,UAARgD,GAA4B,WAARA,GAA4B,MAAPhD,EACzC,MAAQ,GAAGA,IAEf,GAAY,UAARgD,EACA,MAAO,IAAIhD,KAEf,GAAY,UAARgD,EAAkB,CAClB,MAAMC,EAAcjD,EAAIiD,YACxB,OAAmB,MAAfA,EACO,SAEA,UAAUA,IAEzB,CACA,GAAY,YAARD,EAAoB,CACpB,MAAME,EAAOlD,EAAIkD,KACjB,MAAmB,iBAARA,GAAoBA,EAAKjG,OAAS,EAClC,YAAYiG,KAEZ,UAEf,CAEA,GAAIhE,MAAMC,QAAQa,GAAM,CACpB,MAAM/C,EAAS+C,EAAI/C,OACnB,IAAIkG,EAAQ,IACRlG,EAAS,IACTkG,GAASJ,EAAY/C,EAAI,KAE7B,IAAI,IAAI1C,EAAI,EAAGA,EAAIL,EAAQK,IACvB6F,GAAS,KAAOJ,EAAY/C,EAAI1C,IAGpC,OADA6F,GAAS,IACFA,CACX,CAEA,MAAMC,EAAiB,sBAAsBC,KAAKC,SAASC,KAAKvD,IAChE,IAAIwD,EACJ,KAAIJ,EAAenG,OAAS,GAIxB,OAAOqG,SAASC,KAAKvD,GAEzB,GALIwD,EAAYJ,EAAe,GAKd,UAAbI,EAIA,IACI,MAAO,UAAYC,KAAKC,UAAU1D,GAAO,GAC7C,CAAE,MAAO2D,GACL,MAAO,QACX,CAGJ,OAAI3D,aAAevB,MACR,GAAGuB,EAAIkD,SAASlD,EAAI4D,YAAY5D,EAAI6D,QAGxCL,CACX,CA0BA,SAASM,EAAiBC,EAAMC,EAAMC,GAClCnE,EAAKoE,6HAA6HH,EAAMC,EAAMnB,EAAcoB,GAChK,CAEA,SAASE,EAAYC,EAAGC,GACpB,IACI,OAAOD,EAAEE,MAAMC,KAAMF,EACzB,CAAE,MAAOG,GACL1E,EAAK2E,qBAAqB5B,EAAc2B,GAC5C,CACJ,CAlHAhC,EAAkB5C,SA4HX,MAAM8E,EAET,aAAOC,CAAO9C,GACV,MAAMiB,EAAM8B,OAAOC,OAAOH,EAAUI,WAGpC,OAFAhC,EAAIjB,IAAMA,EAEHiB,CACX,CAEA,kBAAAiC,GACI,MAAMlD,EAAM0C,KAAK1C,IAGjB,OAFA0C,KAAK1C,IAAM,EAEJA,CACX,CAEA,IAAAmD,GACI,MAAMnD,EAAM0C,KAAKQ,qBACjBjF,EAAKmF,qBAAqBpD,EAC9B,CAMA,aAAOqD,CAAOC,EAAYC,GACtB,MAAMC,EAAO3D,EAAkByD,EAAYrF,EAAKwF,kBAAmBxF,EAAKyF,oBAClEC,EAAO7E,EAEb,OAAOH,EADKV,EAAK2F,iBAAiBJ,EAAMG,EAAM3C,EAAcuC,IAEhE,CAKA,WAAAM,CAAYC,GACR,IACI,MAAMC,EAAS9F,EAAK+F,iCAAiC,IACrD/F,EAAKgG,cAAcF,EAAQ/C,EAAc8C,IACzC,IAAII,EAAKzD,IAAkBsD,EAAS,EAAI,GACpCI,EAAK1D,IAAkBsD,EAAS,EAAI,GAExC,GADStD,IAAkBsD,EAAS,EAAI,GAEpC,MAAMpF,EAAWwF,GAErB,OAAOtB,EAAUC,OAAOoB,EAC5B,CAAE,QACEjG,EAAK+F,gCAAgC,GACzC,CACJ,CAIA,QAAAI,GACI,IACI,MAAML,EAAS9F,EAAK+F,iCAAiC,IACrD/F,EAAKoG,mBAAmBN,EAAQrB,KAAK1C,KACrC,IAAIkE,EAAKzD,IAAkBsD,EAAS,EAAI,GACpCI,EAAK1D,IAAkBsD,EAAS,EAAI,GAExC,GADStD,IAAkBsD,EAAS,EAAI,GAEpC,MAAMpF,EAAWwF,GAErB,OAAOxF,EAAWuF,EACtB,CAAE,QACEjG,EAAK+F,gCAAgC,GACzC,CACJ,CAOA,IAAAM,CAAKC,EAAYhB,EAAciB,GAC3B,IAAIhB,EAAOjD,EAAWgE,GAAc,EAAI1E,EAAkB0E,EAAYtG,EAAKwF,kBAAmBxF,EAAKyF,oBAC/FC,EAAO7E,EAEX,OAAOH,EADKV,EAAKwG,eAAe/B,KAAK1C,IAAKwD,EAAMG,EAAM3C,EAAcuC,GAAevC,EAAcwD,IAErG,EAKG,MAAME,EAET,aAAO5B,CAAO9C,GACV,MAAMiB,EAAM8B,OAAOC,OAAO0B,EAAQzB,WAGlC,OAFAhC,EAAIjB,IAAMA,EAEHiB,CACX,CAEA,kBAAAiC,GACI,MAAMlD,EAAM0C,KAAK1C,IAGjB,OAFA0C,KAAK1C,IAAM,EAEJA,CACX,CAEA,IAAAmD,GACI,MAAMnD,EAAM0C,KAAKQ,qBACjBjF,EAAK0G,mBAAmB3E,EAC5B,CAUA,cAAA4E,CAAeC,EAAItH,EAAMuH,EAASvB,EAAciB,EAAkBO,GAC9D,MAAMvB,EAAO3D,EAAkBgF,EAAI5G,EAAKwF,kBAAmBxF,EAAKyF,oBAC1DC,EAAO7E,EACb,IAAIkG,EAAOzE,EAAWhD,GAAQ,EAAIsC,EAAkBtC,EAAMU,EAAKwF,kBAAmBxF,EAAKyF,oBACnFuB,EAAOnG,EACPoG,EAAO3E,EAAWuE,GAAW,EAAIjF,EAAkBiF,EAAS7G,EAAKwF,kBAAmBxF,EAAKyF,oBACzFyB,EAAOrG,EAEX,OAAOH,EADKV,EAAKmH,uBAAuB1C,KAAK1C,IAAKwD,EAAMG,EAAMqB,EAAMC,EAAMC,EAAMC,EAAMnE,EAAcuC,GAAevC,EAAcwD,GAAmBxD,EAAc+D,IAEtK,CAKA,cAAAM,CAAe9B,GAEX,OAAO5E,EADKV,EAAKqH,uBAAuB5C,KAAK1C,IAAKgB,EAAcuC,IAEpE,CAKA,WAAAM,CAAYC,GACR,IACI,MAAMC,EAAS9F,EAAK+F,iCAAiC,IACrD/F,EAAKsH,YAAYxB,EAAQ/C,EAAc8C,IACvC,IAAII,EAAKzD,IAAkBsD,EAAS,EAAI,GACpCI,EAAK1D,IAAkBsD,EAAS,EAAI,GAExC,GADStD,IAAkBsD,EAAS,EAAI,GAEpC,MAAMpF,EAAWwF,GAErB,OAAOO,EAAQ5B,OAAOoB,EAC1B,CAAE,QACEjG,EAAK+F,gCAAgC,GACzC,CACJ,CAIA,QAAAI,GACI,IACI,MAAML,EAAS9F,EAAK+F,iCAAiC,IACrD/F,EAAKuH,iBAAiBzB,EAAQrB,KAAK1C,KACnC,IAAIkE,EAAKzD,IAAkBsD,EAAS,EAAI,GACpCI,EAAK1D,IAAkBsD,EAAS,EAAI,GAExC,GADStD,IAAkBsD,EAAS,EAAI,GAEpC,MAAMpF,EAAWwF,GAErB,OAAOxF,EAAWuF,EACtB,CAAE,QACEjG,EAAK+F,gCAAgC,GACzC,CACJ,CAUA,sBAAOyB,CAAgBC,EAAKC,EAASd,EAAIe,EAAcC,EAActC,GACjE,MAAMC,EAAO3D,EAAkB6F,EAAKzH,EAAKwF,kBAAmBxF,EAAKyF,oBAC3DC,EAAO7E,EACPkG,EAAOnF,EAAkBgF,EAAI5G,EAAKwF,kBAAmBxF,EAAKyF,oBAC1DuB,EAAOnG,EAEb,OAAOH,EADKV,EAAK6H,wBAAwBtC,EAAMG,EAAM3C,EAAc2E,GAAUX,EAAMC,EAAMjE,EAAc4E,GAAe5E,EAAc6E,GAAe7E,EAAcuC,IAErK,CAIA,iBAAAwC,GACI,IACI,MAAMhC,EAAS9F,EAAK+F,iCAAiC,IACrD/F,EAAK+H,0BAA0BjC,EAAQrB,KAAK1C,KAC5C,IAAIkE,EAAKzD,IAAkBsD,EAAS,EAAI,GACpCI,EAAK1D,IAAkBsD,EAAS,EAAI,GAExC,GADStD,IAAkBsD,EAAS,EAAI,GAEpC,MAAMpF,EAAWwF,GAErB,OAAOxF,EAAWuF,EACtB,CAAE,QACEjG,EAAK+F,gCAAgC,GACzC,CACJ,CAOA,WAAAiC,CAAYnB,EAASvB,EAAciB,GAC/B,MAAMhB,EAAO3D,EAAkBiF,EAAS7G,EAAKwF,kBAAmBxF,EAAKyF,oBAC/DC,EAAO7E,EAEb,OAAOH,EADKV,EAAKiI,oBAAoBxD,KAAK1C,IAAKwD,EAAMG,EAAM3C,EAAcuC,GAAevC,EAAcwD,IAE1G,CAQA,aAAOnB,CAAOqC,EAAKnC,EAAciB,EAAkBO,GAC/C,MAAMvB,EAAO3D,EAAkB6F,EAAKzH,EAAKwF,kBAAmBxF,EAAKyF,oBAC3DC,EAAO7E,EAEb,OAAOH,EADKV,EAAKkI,eAAe3C,EAAMG,EAAM3C,EAAcuC,GAAevC,EAAcwD,GAAmBxD,EAAc+D,IAE5H,EAqCG,SAASqB,EAA2BlE,GACvCvD,EAAWuD,EACf,CAEO,SAASmE,EAAoBnE,GAEhC,OAAOlB,EADK6B,EAAUC,OAAOZ,GAEjC,CAEO,SAASoE,EAAkBpE,GAE9B,OAAOlB,EADK0D,EAAQ5B,OAAOZ,GAE/B,CAEO,SAASqE,EAAsBrE,EAAMC,GACxC,MAAMlB,EAAM1C,EAAU4D,GAChBvD,EAAsB,iBAAV,EAAqBqC,OAAM3C,EAC7C,IAAIkF,EAAOjD,EAAW3B,GAAO,EAAIiB,EAAkBjB,EAAKX,EAAKwF,kBAAmBxF,EAAKyF,oBACjFC,EAAO7E,EACX2B,IAAkByB,EAAO,EAAI,GAAKyB,EAClClD,IAAkByB,EAAO,EAAI,GAAKsB,CACtC,CAEO,SAASgD,EAAsBtE,EAAMC,GAExC,OAAOnB,EADKD,EAAmBmB,EAAMC,GAEzC,CAEO,SAASsE,IAAqC,OAAOnE,GAAY,SAAUJ,EAAMC,EAAMC,GAE1F,OAAOpB,EADKzC,EAAU2D,GAAMwE,WAAW3F,EAAmBoB,EAAMC,IAEpE,GAAGuE,UAAW,CAEP,SAASC,IAAuC,OAAOtE,GAAY,SAAUJ,EAAMC,GAEtF,OAAOnB,EADKzC,EAAU2D,GAAM2E,aAAalI,EAAWwD,IAExD,GAAGwE,UAAW,CAEP,SAASG,EAAsB5E,EAAMC,GAExC,OAAOnB,EADKY,KAAKmF,MAAMhG,EAAmBmB,EAAMC,IAEpD,CAEO,SAAS6E,EAA0B9E,EAAMC,GAC5C,MAAMlB,EAAM1C,EAAU4D,GAEhBqB,EAAO3D,EADD+B,KAAKC,eAAkBvD,IAAR2C,EAAoB,KAAOA,GAClBhD,EAAKwF,kBAAmBxF,EAAKyF,oBAC3DC,EAAO7E,EACb2B,IAAkByB,EAAO,EAAI,GAAKyB,EAClClD,IAAkByB,EAAO,EAAI,GAAKsB,CACtC,CAEO,SAASyD,IAAmC,OAAO3E,GAAY,SAAUJ,EAAMC,EAAMC,GAExF,OAAOpB,EADKzC,EAAU2D,GAAMgF,QAAQnG,EAAmBoB,EAAMC,IAEjE,GAAGuE,UAAW,CAEP,SAASQ,IAEZ,OAAOnG,EADK,IAAIpE,MAEpB,CAEO,SAASwK,EAA6BlF,EAAMC,GAC/C,MACMqB,EAAO3D,EADDtB,EAAU4D,GAAMH,MACQ/D,EAAKwF,kBAAmBxF,EAAKyF,oBAC3DC,EAAO7E,EACb2B,IAAkByB,EAAO,EAAI,GAAKyB,EAClClD,IAAkByB,EAAO,EAAI,GAAKsB,CACtC,CAEO,SAAS6D,EAA6BnF,EAAMC,GAC/C,IACImF,QAAQC,MAAMxG,EAAmBmB,EAAMC,GAC3C,CAAE,QACElE,EAAKuJ,gBAAgBtF,EAAMC,EAC/B,CACJ,CAEO,SAASsF,EAAmBvF,GAC/B,MAAMjB,EAAMtC,EAAWuD,GAAMwF,SAC7B,OAAiB,GAAbzG,EAAI0G,QACJ1G,EAAI2G,EAAI,GACD,EAIf,CAEO,SAASC,EAA8B3F,GAE1C,OAAOlB,EADKzC,EAAU2D,GAAM4F,OAEhC,CAEO,SAASC,EAAqB7F,GACjC,MAAM/D,EAAMI,EAAU2D,GAEtB,MAD4B,iBAAV,GAA8B,OAAR/D,CAE5C,CAEO,SAAS6J,EAA+B9F,GAE3C,OAAOlB,EADKzC,EAAU2D,GAAM+F,QAEhC,CAEO,SAASC,EAAgChG,GAE5C,OAAOlB,EADKzC,EAAU2D,GAAMiG,SAEhC,CAEO,SAASC,EAA4BlG,GAExC,OAAOlB,EADKzC,EAAU2D,GAAMmG,KAEhC,CAEO,SAASC,EAAqBpG,GAEjC,MADwC,iBAArB3D,EAAU2D,EAEjC,CAEO,SAASqG,IAAmC,OAAOjG,GAAY,WAElE,OAAOtB,EADK/F,EAAOmE,QAEvB,GAAGuH,UAAW,CAEP,SAAS6B,EAAgCtG,GAE5C,OAAOlB,EADKzC,EAAU2D,GAAMuG,SAEhC,CAEO,SAASC,IAA2C,OAAOpG,GAAY,SAAUJ,EAAMC,GAC1F5D,EAAU2D,GAAMyG,gBAAgBpK,EAAU4D,GAC9C,GAAGwE,UAAW,CAEP,SAASiC,IAA0C,OAAOtG,GAAY,SAAUJ,EAAMC,GACzF5D,EAAU2D,GAAM2G,eAAelK,EAAWwD,GAC9C,GAAGwE,UAAW,CAEP,SAASmC,EAA2B5G,EAAMC,GAE7C,OAAOnB,EADKzC,EAAU2D,GAAMC,IAAS,GAEzC,CAEO,SAAS4G,EAA8B7G,GAE1C,OADY3D,EAAU2D,GAAM9G,MAEhC,CAEO,SAAS4N,IAEZ,OAAOhI,EADK,IAAI3D,MAEpB,CAEO,SAAS4L,EAAuB/G,GAEnC,MADwC,mBAArB3D,EAAU2D,EAEjC,CAEO,SAASgH,GAAiChH,EAAMC,GAEnD,OAAOnB,EADK,IAAImI,SAASpI,EAAmBmB,EAAMC,IAEtD,CAEO,SAASiH,KAAgC,OAAO9G,GAAY,SAAUJ,EAAMC,GAE/E,OAAOnB,EADKzC,EAAU2D,GAAMR,KAAKnD,EAAU4D,IAE/C,GAAGwE,UAAW,CAEP,SAAS0C,KAAgC,OAAO/G,GAAY,WAE/D,OAAOtB,EADKsI,KAAKA,KAErB,GAAG3C,UAAW,CAEP,SAAS4C,KAAkC,OAAOjH,GAAY,WAEjE,OAAOtB,EADKwI,OAAOA,OAEvB,GAAG7C,UAAW,CAEP,SAAS8C,KAAsC,OAAOnH,GAAY,WAErE,OAAOtB,EADK0I,WAAWA,WAE3B,GAAG/C,UAAW,CAEP,SAASgD,KAAkC,OAAOrH,GAAY,WAEjE,OAAOtB,EADK,EAAA4I,EAAOC,OAEvB,GAAGlD,UAAW,CAEP,SAASmD,GAAwB5H,GAEpC,YADgC5D,IAApBC,EAAU2D,EAE1B,CAEO,SAAS6H,GAAqC7H,GAEjD,OAAOlB,EADK,IAAI3D,MAAM6E,IAAS,GAEnC,CAEO,SAAS8H,GAA2B9H,EAAMC,EAAMC,GACnD7D,EAAU2D,GAAMC,IAAS,GAAKxD,EAAWyD,EAC7C,CAEO,SAAS6H,GAA+B/H,GAE3C,OADY7E,MAAMC,QAAQiB,EAAU2D,GAExC,CAEO,SAASgI,GAA4BhI,EAAMC,GAE9C,OADY5D,EAAU2D,GAAMzD,KAAKF,EAAU4D,GAE/C,CAEO,SAASgI,GAAwCjI,GACpD,IAAIkI,EACJ,IACIA,EAAS7L,EAAU2D,aAAiBtF,KACxC,CAAE,MACEwN,GAAS,CACb,CAEA,OADYA,CAEhB,CAEO,SAASC,GAA2BnI,EAAMC,GAE7C,OAAOnB,EADK,IAAIpE,MAAMmE,EAAmBmB,EAAMC,IAEnD,CAEO,SAASmI,GAA+BpI,GAE3C,OAAOlB,EADKzC,EAAU2D,GAAMH,QAEhC,CAEO,SAASwI,GAA4BrI,GAExC,OAAOlB,EADKzC,EAAU2D,GAAMb,KAEhC,CAEO,SAASmJ,GAA+BtI,EAAMC,EAAMC,GACvD7D,EAAU2D,GAAMb,KAAON,EAAmBoB,EAAMC,EACpD,CAEO,SAASqI,KAAgC,OAAOnI,GAAY,SAAUJ,EAAMC,EAAMC,GAErF,OAAOpB,EADKzC,EAAU2D,GAAMR,KAAKnD,EAAU4D,GAAO5D,EAAU6D,IAEhE,GAAGuE,UAAW,CAEP,SAAS+D,GAA2BxI,EAAMC,GAC7C,IACI,IAAIwI,EAAS,CAAC/C,EAAG1F,EAAM0I,EAAGzI,GAU1B,MAAMvD,EAAM,IAAIiM,SATN,CAAC3I,EAAMC,KACb,MAAMyF,EAAI+C,EAAO/C,EACjB+C,EAAO/C,EAAI,EACX,IACI,OA9gBhB,SAA2B1F,EAAMC,EAAMC,EAAM0I,GACzC7M,EAAK8M,gEAAgE7I,EAAMC,EAAMnB,EAAcoB,GAAOpB,EAAc8J,GACxH,CA4gBuBE,CAAkBpD,EAAG+C,EAAOC,EAAG1I,EAAMC,EAChD,CAAE,QACEwI,EAAO/C,EAAIA,CACf,KAGJ,OAAO5G,EAAcpC,EACzB,CAAE,QACE+L,EAAO/C,EAAI+C,EAAOC,EAAI,CAC1B,CACJ,CAEO,SAASK,GAA+B/I,GAE3C,OAAOlB,EADK6J,QAAQ3D,QAAQ3I,EAAU2D,IAE1C,CAEO,SAASgJ,GAA4BhJ,EAAMC,GAE9C,OAAOnB,EADKzC,EAAU2D,GAAMiJ,KAAK5M,EAAU4D,IAE/C,CAEO,SAASiJ,GAA4BlJ,EAAMC,EAAMC,GAEpD,OAAOpB,EADKzC,EAAU2D,GAAMiJ,KAAK5M,EAAU4D,GAAO5D,EAAU6D,IAEhE,CAEO,SAASiJ,GAA8BnJ,GAE1C,OAAOlB,EADKzC,EAAU2D,GAAMhF,OAEhC,CAEO,SAASoO,GAAkDpJ,EAAMC,EAAMC,GAE1E,OAAOpB,EADK,IAAIzF,WAAWgD,EAAU2D,GAAOC,IAAS,EAAGC,IAAS,GAErE,CAEO,SAASmJ,GAA2BrJ,GAEvC,OAAOlB,EADK,IAAIzF,WAAWgD,EAAU2D,IAEzC,CAEO,SAASsJ,GAA2BtJ,EAAMC,EAAMC,GACnD7D,EAAU2D,GAAMxC,IAAInB,EAAU4D,GAAOC,IAAS,EAClD,CAEO,SAASqJ,GAAqCvJ,GAEjD,OAAOlB,EADK,IAAIzF,WAAW2G,IAAS,GAExC,CAEO,SAASwJ,GAAgCxJ,EAAMC,EAAMC,GAExD,OAAOpB,EADKzC,EAAU2D,GAAMjC,SAASkC,IAAS,EAAGC,IAAS,GAE9D,CAEO,SAASuJ,GAA4BzJ,GAExC,OAAOlB,EADKzC,EAAU2D,GAE1B,CAEO,SAAS0J,GAAwB1J,EAAMC,GAC1C,MACMqB,EAAO3D,EADDqB,EAAY3C,EAAU4D,IACElE,EAAKwF,kBAAmBxF,EAAKyF,oBAC3DC,EAAO7E,EACb2B,IAAkByB,EAAO,EAAI,GAAKyB,EAClClD,IAAkByB,EAAO,EAAI,GAAKsB,CACtC,CAEO,SAASqI,GAAiB3J,EAAMC,GACnC,MAAM,IAAIvF,MAAMmE,EAAmBmB,EAAMC,GAC7C,CAEO,SAAS2J,KAEZ,OAAO9K,EADK/C,EAAKgB,OAErB,CAEO,SAAS8M,GAA8B7J,EAAMC,EAAMC,GACtD,MAAMxD,EAhoBV,SAAwBsD,EAAMC,EAAM6J,EAAMzJ,GACtC,MAAM0J,EAAQ,CAAErE,EAAG1F,EAAM0I,EAAGzI,EAAMwF,IAAK,EAAGqE,KA+nBH,KA9nBjCE,EAAO,IAAI1J,KAIbyJ,EAAMtE,MACN,MAAMC,EAAIqE,EAAMrE,EAChBqE,EAAMrE,EAAI,EACV,IACI,OAAOrF,EAAEqF,EAAGqE,EAAMrB,KAAMpI,EAC5B,CAAE,QACsB,KAAdyJ,EAAMtE,IACR1J,EAAKkO,oBAAoBC,IAAIH,EAAMD,KAAnC/N,CAAyC2J,EAAGqE,EAAMrB,GAGlDqB,EAAMrE,EAAIA,CAElB,GAIJ,OAFAsE,EAAKxE,SAAWuE,EAETC,CACX,CAymBgBG,CAAenK,EAAMC,EAAM,EAAKF,GAC5C,OAAOjB,EAAcpC,EACzB,8BC7zBA,MAAM,WAAE0N,GAAe,EAAQ,MA+C/BrR,EAAOC,QArCP,MAOE,WAAA2I,CAAaxC,EAAMhB,EAAMkM,EAASC,GAChC9J,KAAKrB,KAAOA,EACZqB,KAAKrC,KAAOA,EACZqC,KAAK+J,QAAUH,EAAW5J,KAAKrC,MAC/BqC,KAAK8J,SAAWA,EAChB9J,KAAKgK,MAAQH,EAAQC,EACvB,CAMA,MAAAzP,CAAQ0C,GACN,OAAOiD,KAAKgK,MAAM3P,OAAO0C,EAC3B,CAMA,MAAA1B,CAAQC,GACN,IAAK,MAAM2O,KAAQ3O,EACjB,GAAI0E,KAAK8J,UAAY9J,KAAK8J,SAASI,QAAQD,GAAQ,EACjD,MAAM,IAAI/P,MAAM,sBAAsB+P,UAAa3O,MAGvD,OAAO0E,KAAKgK,MAAM3O,OAAOC,EAC3B,gCC5CF,MAAM6O,EAAQ,EAAQ,MAChBC,EAAO,EAAQ,MACf,QAAEC,GAAY,EAAQ,OACtB,WAAEC,EAAU,WAAEV,GAAe,EAAQ,MAqBrCW,EAAY,CAChB,CAAC,WAAY,KAdE,KACR,CACLlQ,OAAQiQ,EACRjP,OAAQuO,IAWqB,IAC/B,CAAC,QAAS,IAAKS,EAAQ,GAAI,MAC3B,CAAC,QAAS,IAAKA,EAAQ,GAAI,YAC3B,CAAC,SAAU,IAAKF,EAAO,cACvB,CAAC,SAAU,IAAKE,EAAQ,GAAI,oBAC5B,CAAC,cAAe,IAAKA,EAAQ,GAAI,oBACjC,CAAC,YAAa,IAAKA,EAAQ,GAAI,oCAC/B,CAAC,iBAAkB,IAAKA,EAAQ,GAAI,oCACpC,CAAC,eAAgB,IAAKA,EAAQ,GAAI,qCAClC,CAAC,oBAAqB,IAAKA,EAAQ,GAAI,qCACvC,CAAC,SAAU,IAAKA,EAAQ,GAAI,oCAC5B,CAAC,cAAe,IAAKA,EAAQ,GAAI,oCACjC,CAAC,YAAa,IAAKA,EAAQ,GAAI,qCAC/B,CAAC,iBAAkB,IAAKA,EAAQ,GAAI,qCACpC,CAAC,UAAW,IAAKA,EAAQ,GAAI,oCAC7B,CAAC,SAAU,IAAKF,EAAO,wCACvB,CAAC,cAAe,IAAKA,EAAO,wCAC5B,CAAC,YAAa,IAAKA,EAAO,8DAC1B,CAAC,eAAgB,IAAKA,EAAO,8DAC7B,CAAC,SAAU,IAAKE,EAAQ,GAAI,oEAC5B,CAAC,YAAa,IAAKA,EAAQ,GAAI,qEAC/B,CAAC,YAAa,IAAKA,EAAQ,GAAI,oEAC/B,CAAC,eAAgB,IAAKA,EAAQ,GAAI,sEAI9BG,EAAQD,EAAUE,QAAO,CAACC,EAAMC,KACpCD,EAAKC,EAAO,IAAM,IAAIP,EAAKO,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIA,EAAO,IAC5DD,IAC8B,CAAG,GAGpCE,EAAQL,EAAUE,QAAO,CAACC,EAAMC,KACpCD,EAAKC,EAAO,IAAMH,EAAMG,EAAO,IACxBD,IAC8B,CAAG,GAE1CnS,EAAOC,QAAU,CACfgS,QACAI,sCC5DF,MAAML,EAAY,EAAQ,OACpB,WAAEX,EAAU,WAAEU,EAAU,OAAEO,GAAW,EAAQ,MA2GnD,SAASC,EAAUC,GACjB,GAAI1K,OAAOE,UAAUyK,eAAehM,KAAKuL,EAAUC,MAA8B,GAC/E,OAAOD,EAAUC,MAA6B,GACzC,GAAInK,OAAOE,UAAUyK,eAAehM,KAAKuL,EAAUK,MAA8B,GACtF,OAAOL,EAAUK,MAA6B,GAE9C,MAAM,IAAI1Q,MAAM,yBAAyB6Q,IAE7C,EAiBAvS,EAAUD,EAAOC,QArHjB,SAAoBuS,EAAYhO,GAC9B,IAAKA,EACH,MAAM,IAAI7C,MAAM,kCAElB,MAAM,KAAEyE,EAAI,QAAEoL,GAAYe,EAASC,GAGnC,OAyEF,SAAsBpM,EAAM5B,GACd+N,EAASnM,GACjBtD,OAAOiP,EAAWvN,GACxB,CA9EEkO,CAAYtM,EAAM5B,GAEX8N,EAAO,CAACd,EAAShN,GAAMgN,EAAQrR,OAASqE,EAAIrE,OACrD,GA8GQ2B,OAnGR,SAAiB0Q,EAAYhO,GAC3B,MAAMmO,EAAMJ,EAASC,GACfI,EAAOvB,EAAWsB,EAAI7Q,OAAO0C,IAEnC,OAAO8N,EAAO,CAACK,EAAInB,QAASoB,GAAOD,EAAInB,QAAQrR,OAASyS,EAAKzS,OAC/D,EA+FAF,EAAQ6C,OApFR,SAAiB8P,GACXA,aAAgBtS,aAClBsS,EAAOb,EAAWa,IAEpB,MAAMC,EAASD,EAAK,GAOpB,MAJI,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAKE,SAASD,KAC7ED,EAAOA,EAAKG,eAEFR,EAAiCK,EAAK,IACvC9P,OAAO8P,EAAKI,UAAU,GACnC,EAyEA/S,EAAQgT,UAlER,SAAoBL,GAMlB,GALIA,aAAgBtS,aAClBsS,EAAOb,EAAWa,IAIyB,oBAAzC9K,OAAOE,UAAUxB,SAASC,KAAKmM,GACjC,OAAO,EAGT,IAEE,OADYL,EAAiCK,EAAK,IACvCxM,IACb,CAAE,MAAO8M,GACP,OAAO,CACT,CACF,EAmDAjT,EAAQsS,SAAWA,EACnBtS,EAAQkT,iBAbR,SAA2BP,GAKzB,OAJIA,aAAgBtS,aAClBsS,EAAOb,EAAWa,IAGbL,EAAiCK,EAAK,GAC/C,EAQA,MAAMX,EAAQnK,OAAOsL,OAAOpB,EAAUC,OAChCI,EAAQvK,OAAOsL,OAAOpB,EAAUK,OACtCpS,EAAQgS,MAAQA,EAChBhS,EAAQoS,MAAQA,yBC1BhBrS,EAAOC,QAAU,CAAE6R,QAnBFuB,GAAiB9B,IACzB,CAKLzP,OAAQwR,GA9CG,EAACV,EAAMrB,EAAU8B,KAC9B,MAAME,EAAwC,MAAlChC,EAASA,EAASpR,OAAS,GACjCqT,GAAQ,GAAKH,GAAe,EAClC,IAAII,EAAM,GAENC,EAAO,EACPzR,EAAS,EACb,IAAK,IAAIzB,EAAI,EAAGA,EAAIoS,EAAKzS,SAAUK,EAMjC,IAJAyB,EAAUA,GAAU,EAAK2Q,EAAKpS,GAC9BkT,GAAQ,EAGDA,EAAOL,GACZK,GAAQL,EACRI,GAAOlC,EAASiC,EAAQvR,GAAUyR,GAUtC,GALIA,IACFD,GAAOlC,EAASiC,EAAQvR,GAAWoR,EAAcK,IAI/CH,EACF,KAAQE,EAAItT,OAASkT,EAAe,GAClCI,GAAO,IAIX,OAAOA,GAgBI3R,CAAOwR,EAAO/B,EAAU8B,GAMjCvQ,OAAQwQ,GA1GG,EAACvQ,EAAQwO,EAAU8B,KAGhC,MAAMhB,EAAQ,CAAC,EACf,IAAK,IAAI7R,EAAI,EAAGA,EAAI+Q,EAASpR,SAAUK,EACrC6R,EAAMd,EAAS/Q,IAAMA,EAIvB,IAAImT,EAAM5Q,EAAO5C,OACjB,KAA2B,MAApB4C,EAAO4Q,EAAM,MAChBA,EAIJ,MAAMF,EAAM,IAAInT,WAAYqT,EAAMN,EAAc,EAAK,GAGrD,IAAIK,EAAO,EACPzR,EAAS,EACT0C,EAAU,EACd,IAAK,IAAInE,EAAI,EAAGA,EAAImT,IAAOnT,EAAG,CAE5B,MAAMqI,EAAQwJ,EAAMtP,EAAOvC,IAC3B,QAAc6C,IAAVwF,EACF,MAAM,IAAI+K,YAAY,qBAAuB7Q,EAAOvC,IAItDyB,EAAUA,GAAUoR,EAAexK,EACnC6K,GAAQL,EAGJK,GAAQ,IACVA,GAAQ,EACRD,EAAI9O,KAAa,IAAQ1C,GAAUyR,EAEvC,CAGA,GAAIA,GAAQL,GAAe,IAAQpR,GAAW,EAAIyR,EAChD,MAAM,IAAIE,YAAY,0BAGxB,OAAOH,GA+DI3Q,CAAOwQ,EAAO/B,EAAU8B,6BCnHrC,MAAMQ,EAAc,IAAIlO,YAOlBmO,EAAc,IAAI5P,YA0BxBlE,EAAOC,QAAU,CAAE8R,WA5BCgC,GAAUF,EAAY/Q,OAAOiR,GA4BlB1C,WArBX2C,GAASF,EAAYhS,OAAOkS,GAqBL1B,OAZ3C,SAAiB2B,EAAM9T,GACrB,MAAM+T,EAAS,IAAI5T,WAAWH,GAC9B,IAAIgF,EAAS,EAEb,IAAK,MAAMgP,KAAOF,EAChBC,EAAOzP,IAAI0P,EAAKhP,GAChBA,GAAUgP,EAAIhU,OAGhB,OAAO+T,CACT,0BC1BA,MAAME,EAAYtM,OAAOsL,OAAO,CAC9B,SAAY,EACZ,MAAS,EACT,MAAS,EACT,MAAS,EACT,IAAO,EACP,IAAO,EACP,KAAQ,GACR,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,YAAa,GACb,YAAa,GACb,aAAc,GACd,aAAc,GACd,aAAc,GACd,aAAc,GACd,OAAU,GACV,KAAQ,GACR,cAAe,GACf,aAAc,GACd,IAAO,GACP,QAAW,GACX,KAAQ,GACR,WAAc,GACd,UAAa,GACb,UAAa,GACb,UAAa,GACb,IAAO,GACP,KAAQ,GACR,KAAQ,GACR,QAAW,GACX,SAAY,GACZ,KAAQ,GACR,IAAO,GACP,eAAgB,GAChB,IAAO,GACP,QAAW,GACX,SAAU,IACV,WAAY,IACZ,aAAc,IACd,UAAW,IACX,eAAgB,IAChB,eAAgB,IAChB,iBAAkB,IAClB,cAAe,IACf,cAAe,IACf,KAAQ,IACR,WAAY,IACZ,WAAY,IACZ,YAAa,IACb,iBAAkB,IAClB,cAAe,IACf,SAAU,IACV,sBAAuB,IACvB,iBAAkB,IAClB,iBAAkB,IAClB,uBAAwB,IACxB,mBAAoB,IACpB,uBAAwB,IACxB,kBAAmB,IACnB,gBAAiB,IACjB,aAAc,IACd,6BAA8B,IAC9B,cAAe,IACf,WAAY,IACZ,UAAW,IACX,SAAY,IACZ,gBAAiB,IACjB,aAAc,IACd,IAAO,IACP,IAAO,IACP,IAAO,IACP,eAAgB,IAChB,YAAa,IACb,UAAW,IACX,UAAW,IACX,WAAY,IACZ,UAAW,IACX,QAAW,IACX,gBAAiB,IACjB,mBAAoB,IACpB,mBAAoB,IACpB,aAAc,IACd,cAAe,IACf,qBAAsB,IACtB,aAAc,IACd,UAAW,IACX,iBAAkB,IAClB,aAAc,IACd,IAAO,IACP,kBAAmB,IACnB,oBAAqB,IACrB,eAAgB,IAChB,cAAe,IACf,WAAY,IACZ,IAAO,IACP,IAAO,IACP,KAAQ,IACR,OAAU,IACV,IAAO,IACP,KAAQ,IACR,MAAS,IACT,MAAS,IACT,OAAU,IACV,SAAY,IACZ,SAAY,IACZ,IAAO,IACP,MAAS,IACT,KAAQ,IACR,GAAM,IACN,IAAO,IACP,qBAAsB,IACtB,KAAQ,IACR,cAAe,IACf,KAAQ,IACR,YAAe,IACf,qBAAsB,IACtB,oBAAqB,IACrB,mBAAoB,KACpB,2BAA4B,KAC5B,aAAc,KACd,aAAc,KACd,aAAc,KACd,aAAc,KACd,IAAO,KACP,WAAY,KACZ,WAAY,KACZ,WAAY,KACZ,YAAa,KACb,WAAY,KACZ,eAAgB,KAChB,iBAAkB,KAClB,cAAe,KACf,eAAkB,KAClB,UAAW,MACX,YAAa,MACb,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,YAAa,MACb,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,aAAc,MACd,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,aAAc,MACd,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,cAAe,MACf,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,KACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAA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","sources":["webpack://didcomm-demo/./node_modules/@multiformats/base-x/src/index.js","webpack://didcomm-demo/./node_modules/didcomm/index.js","webpack://didcomm-demo/./node_modules/didcomm/index_bg.js","webpack://didcomm-demo/./node_modules/multibase/src/base.js","webpack://didcomm-demo/./node_modules/multibase/src/constants.js","webpack://didcomm-demo/./node_modules/multibase/src/index.js","webpack://didcomm-demo/./node_modules/multibase/src/rfc4648.js","webpack://didcomm-demo/./node_modules/multibase/src/util.js","webpack://didcomm-demo/./node_modules/multicodec/src/generated-table.js","webpack://didcomm-demo/./node_modules/multicodec/src/index.js","webpack://didcomm-demo/./node_modules/multicodec/src/maps.js","webpack://didcomm-demo/./node_modules/multicodec/src/util.js","webpack://didcomm-demo/./node_modules/uuid/dist/esm-browser/native.js","webpack://didcomm-demo/./node_modules/uuid/dist/esm-browser/rng.js","webpack://didcomm-demo/./node_modules/uuid/dist/esm-browser/stringify.js","webpack://didcomm-demo/./node_modules/uuid/dist/esm-browser/v4.js","webpack://didcomm-demo/./node_modules/varint/decode.js","webpack://didcomm-demo/./node_modules/varint/encode.js","webpack://didcomm-demo/./node_modules/varint/index.js","webpack://didcomm-demo/./node_modules/varint/length.js","webpack://didcomm-demo/./node_modules/@noble/hashes/esm/_assert.js","webpack://didcomm-demo/./node_modules/@noble/hashes/esm/crypto.js","webpack://didcomm-demo/./node_modules/@noble/hashes/esm/utils.js","webpack://didcomm-demo/./node_modules/@noble/hashes/esm/_sha2.js","webpack://didcomm-demo/./node_modules/@noble/hashes/esm/_u64.js","webpack://didcomm-demo/./node_modules/@noble/hashes/esm/sha512.js","webpack://didcomm-demo/./node_modules/@noble/curves/esm/abstract/utils.js","webpack://didcomm-demo/./node_modules/@noble/curves/esm/abstract/modular.js","webpack://didcomm-demo/./node_modules/@noble/curves/esm/abstract/curve.js","webpack://didcomm-demo/./node_modules/@noble/curves/esm/abstract/edwards.js","webpack://didcomm-demo/./node_modules/@noble/curves/esm/ed25519.js","webpack://didcomm-demo/./node_modules/uint8arrays/esm/src/alloc.js","webpack://didcomm-demo/./node_modules/uint8arrays/esm/src/concat.js","webpack://didcomm-demo/./node_modules/uint8arrays/esm/src/from-string.js","webpack://didcomm-demo/./node_modules/uint8arrays/esm/src/to-string.js","webpack://didcomm-demo/./node_modules/uint8arrays/esm/src/util/as-uint8array.js","webpack://didcomm-demo/./node_modules/multiformats/esm/vendor/base-x.js","webpack://didcomm-demo/./node_modules/multiformats/esm/src/bytes.js","webpack://didcomm-demo/./node_modules/multiformats/esm/src/bases/base.js","webpack://didcomm-demo/./node_modules/multiformats/esm/src/bases/identity.js","webpack://didcomm-demo/./node_modules/multiformats/esm/src/bases/base2.js","webpack://didcomm-demo/./node_modules/multiformats/esm/src/bases/base8.js","webpack://didcomm-demo/./node_modules/multiformats/esm/src/bases/base10.js","webpack://didcomm-demo/./node_modules/multiformats/esm/src/bases/base16.js","webpack://didcomm-demo/./node_modules/multiformats/esm/src/bases/base32.js","webpack://didcomm-demo/./node_modules/multiformats/esm/src/bases/base36.js","webpack://didcomm-demo/./node_modules/multiformats/esm/src/bases/base58.js","webpack://didcomm-demo/./node_modules/multiformats/esm/src/bases/base64.js","webpack://didcomm-demo/./node_modules/multiformats/esm/src/bases/base256emoji.js","webpack://didcomm-demo/./node_modules/multiformats/esm/vendor/varint.js","webpack://didcomm-demo/./node_modules/multiformats/esm/src/varint.js","webpack://didcomm-demo/./node_modules/multiformats/esm/src/hashes/digest.js","webpack://didcomm-demo/./node_modules/multiformats/esm/src/hashes/hasher.js","webpack://didcomm-demo/./node_modules/multiformats/esm/src/hashes/sha2-browser.js","webpack://didcomm-demo/./node_modules/multiformats/esm/src/hashes/identity.js","webpack://didcomm-demo/./node_modules/multiformats/esm/src/codecs/raw.js","webpack://didcomm-demo/./node_modules/multiformats/esm/src/codecs/json.js","webpack://didcomm-demo/./node_modules/multiformats/esm/src/cid.js","webpack://didcomm-demo/./node_modules/multiformats/esm/src/basics.js","webpack://didcomm-demo/./node_modules/uint8arrays/esm/src/util/bases.js"],"sourcesContent":["'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) {\n    } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = new Uint8Array(zeroes + (size - it4))\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","import * as wasm from \"./index_bg.wasm\";\nimport { __wbg_set_wasm } from \"./index_bg.js\";\n__wbg_set_wasm(wasm);\nexport * from \"./index_bg.js\";\n","let wasm;\nexport function __wbg_set_wasm(val) {\n    wasm = val;\n}\n\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_2.get(state.dtor)(a, state.b);\n\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n\n    return real;\n}\nfunction __wbg_adapter_30(arg0, arg1, arg2) {\n    wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h13e646700cf6c015(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\nfunction __wbg_adapter_106(arg0, arg1, arg2, arg3) {\n    wasm.wasm_bindgen__convert__closures__invoke2_mut__h68672ab3ea60d469(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));\n}\n\n/**\n* Allows building of `from_prior` message header according\n* to DIDComm DID Rotation procedure\n* https://identity.foundation/didcomm-messaging/spec/#did-rotation.\n*/\nexport class FromPrior {\n\n    static __wrap(ptr) {\n        const obj = Object.create(FromPrior.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_fromprior_free(ptr);\n    }\n    /**\n    * @param {string} from_prior\n    * @param {any} did_resolver\n    * @returns {Promise<any>}\n    */\n    static unpack(from_prior, did_resolver) {\n        const ptr0 = passStringToWasm0(from_prior, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.fromprior_unpack(ptr0, len0, addHeapObject(did_resolver));\n        return takeObject(ret);\n    }\n    /**\n    * Instantiates FromPrior from plain object\n    * @param {IFromPrior} value\n    */\n    constructor(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.fromprior_new(retptr, addHeapObject(value));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return FromPrior.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    as_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.fromprior_as_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string | undefined} issuer_kid\n    * @param {any} did_resolver\n    * @param {any} secrets_resolver\n    * @returns {Promise<any>}\n    */\n    pack(issuer_kid, did_resolver, secrets_resolver) {\n        var ptr0 = isLikeNone(issuer_kid) ? 0 : passStringToWasm0(issuer_kid, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        const ret = wasm.fromprior_pack(this.ptr, ptr0, len0, addHeapObject(did_resolver), addHeapObject(secrets_resolver));\n        return takeObject(ret);\n    }\n}\n/**\n* Wrapper for plain message. Provides helpers for message building and packing/unpacking.\n*/\nexport class Message {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Message.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_message_free(ptr);\n    }\n    /**\n    * @param {string} to\n    * @param {string | undefined} from\n    * @param {string | undefined} sign_by\n    * @param {any} did_resolver\n    * @param {any} secrets_resolver\n    * @param {any} options\n    * @returns {Promise<any>}\n    */\n    pack_encrypted(to, from, sign_by, did_resolver, secrets_resolver, options) {\n        const ptr0 = passStringToWasm0(to, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(from) ? 0 : passStringToWasm0(from, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(sign_by) ? 0 : passStringToWasm0(sign_by, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        const ret = wasm.message_pack_encrypted(this.ptr, ptr0, len0, ptr1, len1, ptr2, len2, addHeapObject(did_resolver), addHeapObject(secrets_resolver), addHeapObject(options));\n        return takeObject(ret);\n    }\n    /**\n    * @param {any} did_resolver\n    * @returns {Promise<any>}\n    */\n    pack_plaintext(did_resolver) {\n        const ret = wasm.message_pack_plaintext(this.ptr, addHeapObject(did_resolver));\n        return takeObject(ret);\n    }\n    /**\n    * Instantiates message from plain object\n    * @param {IMessage} value\n    */\n    constructor(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.message_new(retptr, addHeapObject(value));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Message.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    as_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.message_as_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} msg\n    * @param {any} headers\n    * @param {string} to\n    * @param {any} routing_keys\n    * @param {any} enc_alg_anon\n    * @param {any} did_resolver\n    * @returns {Promise<any>}\n    */\n    static wrap_in_forward(msg, headers, to, routing_keys, enc_alg_anon, did_resolver) {\n        const ptr0 = passStringToWasm0(msg, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(to, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.message_wrap_in_forward(ptr0, len0, addHeapObject(headers), ptr1, len1, addHeapObject(routing_keys), addHeapObject(enc_alg_anon), addHeapObject(did_resolver));\n        return takeObject(ret);\n    }\n    /**\n    * @returns {any}\n    */\n    try_parse_forward() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.message_try_parse_forward(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} sign_by\n    * @param {any} did_resolver\n    * @param {any} secrets_resolver\n    * @returns {Promise<any>}\n    */\n    pack_signed(sign_by, did_resolver, secrets_resolver) {\n        const ptr0 = passStringToWasm0(sign_by, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.message_pack_signed(this.ptr, ptr0, len0, addHeapObject(did_resolver), addHeapObject(secrets_resolver));\n        return takeObject(ret);\n    }\n    /**\n    * @param {string} msg\n    * @param {any} did_resolver\n    * @param {any} secrets_resolver\n    * @param {any} options\n    * @returns {Promise<any>}\n    */\n    static unpack(msg, did_resolver, secrets_resolver, options) {\n        const ptr0 = passStringToWasm0(msg, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.message_unpack(ptr0, len0, addHeapObject(did_resolver), addHeapObject(secrets_resolver), addHeapObject(options));\n        return takeObject(ret);\n    }\n}\n/**\n*/\nexport class ParsedForward {\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_parsedforward_free(ptr);\n    }\n    /**\n    * @returns {any}\n    */\n    as_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.parsedforward_as_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nexport function __wbindgen_object_drop_ref(arg0) {\n    takeObject(arg0);\n};\n\nexport function __wbg_fromprior_new(arg0) {\n    const ret = FromPrior.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_message_new(arg0) {\n    const ret = Message.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_string_get(arg0, arg1) {\n    const obj = getObject(arg1);\n    const ret = typeof(obj) === 'string' ? obj : undefined;\n    var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport function __wbindgen_string_new(arg0, arg1) {\n    const ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_getsecret_ccfcf375746a12ac() { return handleError(function (arg0, arg1, arg2) {\n    const ret = getObject(arg0).get_secret(getStringFromWasm0(arg1, arg2));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_findsecrets_98c99bb5926b9d22() { return handleError(function (arg0, arg1) {\n    const ret = getObject(arg0).find_secrets(takeObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbindgen_json_parse(arg0, arg1) {\n    const ret = JSON.parse(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_json_serialize(arg0, arg1) {\n    const obj = getObject(arg1);\n    const ret = JSON.stringify(obj === undefined ? null : obj);\n    const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport function __wbg_resolve_67047def68d50f12() { return handleError(function (arg0, arg1, arg2) {\n    const ret = getObject(arg0).resolve(getStringFromWasm0(arg1, arg2));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_new_abda76e883ba8a5f() {\n    const ret = new Error();\n    return addHeapObject(ret);\n};\n\nexport function __wbg_stack_658279fe44541cf6(arg0, arg1) {\n    const ret = getObject(arg1).stack;\n    const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport function __wbg_error_f851667af71bcfc6(arg0, arg1) {\n    try {\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(arg0, arg1);\n    }\n};\n\nexport function __wbindgen_cb_drop(arg0) {\n    const obj = takeObject(arg0).original;\n    if (obj.cnt-- == 1) {\n        obj.a = 0;\n        return true;\n    }\n    const ret = false;\n    return ret;\n};\n\nexport function __wbg_crypto_70a96de3b6b73dac(arg0) {\n    const ret = getObject(arg0).crypto;\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_is_object(arg0) {\n    const val = getObject(arg0);\n    const ret = typeof(val) === 'object' && val !== null;\n    return ret;\n};\n\nexport function __wbg_process_dd1577445152112e(arg0) {\n    const ret = getObject(arg0).process;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_versions_58036bec3add9e6f(arg0) {\n    const ret = getObject(arg0).versions;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_node_6a9d28205ed5b0d8(arg0) {\n    const ret = getObject(arg0).node;\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_is_string(arg0) {\n    const ret = typeof(getObject(arg0)) === 'string';\n    return ret;\n};\n\nexport function __wbg_require_f05d779769764e82() { return handleError(function () {\n    const ret = module.require;\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_msCrypto_adbc770ec9eca9c7(arg0) {\n    const ret = getObject(arg0).msCrypto;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_getRandomValues_3774744e221a22ad() { return handleError(function (arg0, arg1) {\n    getObject(arg0).getRandomValues(getObject(arg1));\n}, arguments) };\n\nexport function __wbg_randomFillSync_e950366c42764a07() { return handleError(function (arg0, arg1) {\n    getObject(arg0).randomFillSync(takeObject(arg1));\n}, arguments) };\n\nexport function __wbg_get_27fe3dac1c4d0224(arg0, arg1) {\n    const ret = getObject(arg0)[arg1 >>> 0];\n    return addHeapObject(ret);\n};\n\nexport function __wbg_length_e498fbc24f9c1d4f(arg0) {\n    const ret = getObject(arg0).length;\n    return ret;\n};\n\nexport function __wbg_new_b525de17f44a8943() {\n    const ret = new Array();\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_is_function(arg0) {\n    const ret = typeof(getObject(arg0)) === 'function';\n    return ret;\n};\n\nexport function __wbg_newnoargs_2b8b6bd7753c76ba(arg0, arg1) {\n    const ret = new Function(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_call_95d1ea488d03e4e8() { return handleError(function (arg0, arg1) {\n    const ret = getObject(arg0).call(getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_self_e7c1f827057f6584() { return handleError(function () {\n    const ret = self.self;\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_window_a09ec664e14b1b81() { return handleError(function () {\n    const ret = window.window;\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_globalThis_87cbb8506fecf3a9() { return handleError(function () {\n    const ret = globalThis.globalThis;\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_global_c85a9259e621f3db() { return handleError(function () {\n    const ret = global.global;\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbindgen_is_undefined(arg0) {\n    const ret = getObject(arg0) === undefined;\n    return ret;\n};\n\nexport function __wbg_newwithlength_0da6f12fbc1ab6eb(arg0) {\n    const ret = new Array(arg0 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_set_17224bc548dd1d7b(arg0, arg1, arg2) {\n    getObject(arg0)[arg1 >>> 0] = takeObject(arg2);\n};\n\nexport function __wbg_isArray_39d28997bf6b96b4(arg0) {\n    const ret = Array.isArray(getObject(arg0));\n    return ret;\n};\n\nexport function __wbg_push_49c286f04dd3bf59(arg0, arg1) {\n    const ret = getObject(arg0).push(getObject(arg1));\n    return ret;\n};\n\nexport function __wbg_instanceof_Error_749a7378f4439ee0(arg0) {\n    let result;\n    try {\n        result = getObject(arg0) instanceof Error;\n    } catch {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_new_15d3966e9981a196(arg0, arg1) {\n    const ret = new Error(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_message_a95c3ef248e4b57a(arg0) {\n    const ret = getObject(arg0).message;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_name_c69a20c4b1197dc0(arg0) {\n    const ret = getObject(arg0).name;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_setname_7eace1cb10ca6787(arg0, arg1, arg2) {\n    getObject(arg0).name = getStringFromWasm0(arg1, arg2);\n};\n\nexport function __wbg_call_9495de66fdbe016b() { return handleError(function (arg0, arg1, arg2) {\n    const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_new_9d3a9ce4282a18a8(arg0, arg1) {\n    try {\n        var state0 = {a: arg0, b: arg1};\n        var cb0 = (arg0, arg1) => {\n            const a = state0.a;\n            state0.a = 0;\n            try {\n                return __wbg_adapter_106(a, state0.b, arg0, arg1);\n            } finally {\n                state0.a = a;\n            }\n        };\n        const ret = new Promise(cb0);\n        return addHeapObject(ret);\n    } finally {\n        state0.a = state0.b = 0;\n    }\n};\n\nexport function __wbg_resolve_fd40f858d9db1a04(arg0) {\n    const ret = Promise.resolve(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_then_ec5db6d509eb475f(arg0, arg1) {\n    const ret = getObject(arg0).then(getObject(arg1));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_then_f753623316e2873a(arg0, arg1, arg2) {\n    const ret = getObject(arg0).then(getObject(arg1), getObject(arg2));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_buffer_cf65c07de34b9a08(arg0) {\n    const ret = getObject(arg0).buffer;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_newwithbyteoffsetandlength_9fb2f11355ecadf5(arg0, arg1, arg2) {\n    const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_new_537b7341ce90bb31(arg0) {\n    const ret = new Uint8Array(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_set_17499e8aa4003ebd(arg0, arg1, arg2) {\n    getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n};\n\nexport function __wbg_newwithlength_b56c882b57805732(arg0) {\n    const ret = new Uint8Array(arg0 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_subarray_7526649b91a252a6(arg0, arg1, arg2) {\n    const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_object_clone_ref(arg0) {\n    const ret = getObject(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_debug_string(arg0, arg1) {\n    const ret = debugString(getObject(arg1));\n    const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nexport function __wbindgen_memory() {\n    const ret = wasm.memory;\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_closure_wrapper843(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 162, __wbg_adapter_30);\n    return addHeapObject(ret);\n};\n\n","'use strict'\n\nconst { encodeText } = require('./util')\n\n/** @typedef {import('./types').CodecFactory} CodecFactory */\n/** @typedef {import(\"./types\").BaseName} BaseName */\n/** @typedef {import(\"./types\").BaseCode} BaseCode */\n\n/**\n * Class to encode/decode in the supported Bases\n *\n */\nclass Base {\n  /**\n   * @param {BaseName} name\n   * @param {BaseCode} code\n   * @param {CodecFactory} factory\n   * @param {string} alphabet\n   */\n  constructor (name, code, factory, alphabet) {\n    this.name = name\n    this.code = code\n    this.codeBuf = encodeText(this.code)\n    this.alphabet = alphabet\n    this.codec = factory(alphabet)\n  }\n\n  /**\n   * @param {Uint8Array} buf\n   * @returns {string}\n   */\n  encode (buf) {\n    return this.codec.encode(buf)\n  }\n\n  /**\n   * @param {string} string\n   * @returns {Uint8Array}\n   */\n  decode (string) {\n    for (const char of string) {\n      if (this.alphabet && this.alphabet.indexOf(char) < 0) {\n        throw new Error(`invalid character '${char}' in '${string}'`)\n      }\n    }\n    return this.codec.decode(string)\n  }\n}\n\nmodule.exports = Base\n","'use strict'\n\nconst baseX = require('@multiformats/base-x')\nconst Base = require('./base.js')\nconst { rfc4648 } = require('./rfc4648')\nconst { decodeText, encodeText } = require('./util')\n\n/** @typedef {import('./types').CodecFactory} CodecFactory */\n/** @typedef {import('./types').Codec} Codec */\n/** @typedef {import('./types').BaseName} BaseName */\n/** @typedef {import('./types').BaseCode} BaseCode */\n\n/** @type {CodecFactory} */\nconst identity = () => {\n  return {\n    encode: decodeText,\n    decode: encodeText\n  }\n}\n\n/**\n *\n * name, code, implementation, alphabet\n *\n * @type {Array<[BaseName, BaseCode, CodecFactory, string]>}\n */\nconst constants = [\n  ['identity', '\\x00', identity, ''],\n  ['base2', '0', rfc4648(1), '01'],\n  ['base8', '7', rfc4648(3), '01234567'],\n  ['base10', '9', baseX, '0123456789'],\n  ['base16', 'f', rfc4648(4), '0123456789abcdef'],\n  ['base16upper', 'F', rfc4648(4), '0123456789ABCDEF'],\n  ['base32hex', 'v', rfc4648(5), '0123456789abcdefghijklmnopqrstuv'],\n  ['base32hexupper', 'V', rfc4648(5), '0123456789ABCDEFGHIJKLMNOPQRSTUV'],\n  ['base32hexpad', 't', rfc4648(5), '0123456789abcdefghijklmnopqrstuv='],\n  ['base32hexpadupper', 'T', rfc4648(5), '0123456789ABCDEFGHIJKLMNOPQRSTUV='],\n  ['base32', 'b', rfc4648(5), 'abcdefghijklmnopqrstuvwxyz234567'],\n  ['base32upper', 'B', rfc4648(5), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'],\n  ['base32pad', 'c', rfc4648(5), 'abcdefghijklmnopqrstuvwxyz234567='],\n  ['base32padupper', 'C', rfc4648(5), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567='],\n  ['base32z', 'h', rfc4648(5), 'ybndrfg8ejkmcpqxot1uwisza345h769'],\n  ['base36', 'k', baseX, '0123456789abcdefghijklmnopqrstuvwxyz'],\n  ['base36upper', 'K', baseX, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'],\n  ['base58btc', 'z', baseX, '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'],\n  ['base58flickr', 'Z', baseX, '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'],\n  ['base64', 'm', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'],\n  ['base64pad', 'M', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='],\n  ['base64url', 'u', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'],\n  ['base64urlpad', 'U', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=']\n]\n\n/** @type {Record<BaseName,Base>} */\nconst names = constants.reduce((prev, tupple) => {\n  prev[tupple[0]] = new Base(tupple[0], tupple[1], tupple[2], tupple[3])\n  return prev\n}, /** @type {Record<BaseName,Base>} */({}))\n\n/** @type {Record<BaseCode,Base>} */\nconst codes = constants.reduce((prev, tupple) => {\n  prev[tupple[1]] = names[tupple[0]]\n  return prev\n}, /** @type {Record<BaseCode,Base>} */({}))\n\nmodule.exports = {\n  names,\n  codes\n}\n","/**\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\n *\n */\n'use strict'\n\nconst constants = require('./constants')\nconst { encodeText, decodeText, concat } = require('./util')\n\n/** @typedef {import('./base')} Base */\n/** @typedef {import(\"./types\").BaseNameOrCode} BaseNameOrCode */\n/** @typedef {import(\"./types\").BaseCode} BaseCode */\n/** @typedef {import(\"./types\").BaseName} BaseName */\n\n/**\n * Create a new Uint8Array with the multibase varint+code.\n *\n * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.\n * @param {Uint8Array} buf - The data to be prefixed with multibase.\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction multibase (nameOrCode, buf) {\n  if (!buf) {\n    throw new Error('requires an encoded Uint8Array')\n  }\n  const { name, codeBuf } = encoding(nameOrCode)\n  validEncode(name, buf)\n\n  return concat([codeBuf, buf], codeBuf.length + buf.length)\n}\n\n/**\n * Encode data with the specified base and add the multibase prefix.\n *\n * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.\n * @param {Uint8Array} buf - The data to be encoded.\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\nfunction encode (nameOrCode, buf) {\n  const enc = encoding(nameOrCode)\n  const data = encodeText(enc.encode(buf))\n\n  return concat([enc.codeBuf, data], enc.codeBuf.length + data.length)\n}\n\n/**\n * Takes a Uint8Array or string encoded with multibase header, decodes it and\n * returns the decoded buffer\n *\n * @param {Uint8Array|string} data\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\nfunction decode (data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data)\n  }\n  const prefix = data[0]\n\n  // Make all encodings case-insensitive except the ones that include upper and lower chars in the alphabet\n  if (['f', 'F', 'v', 'V', 't', 'T', 'b', 'B', 'c', 'C', 'h', 'k', 'K'].includes(prefix)) {\n    data = data.toLowerCase()\n  }\n  const enc = encoding(/** @type {BaseCode} */(data[0]))\n  return enc.decode(data.substring(1))\n}\n\n/**\n * Is the given data multibase encoded?\n *\n * @param {Uint8Array|string} data\n */\nfunction isEncoded (data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data)\n  }\n\n  // Ensure bufOrString is a string\n  if (Object.prototype.toString.call(data) !== '[object String]') {\n    return false\n  }\n\n  try {\n    const enc = encoding(/** @type {BaseCode} */(data[0]))\n    return enc.name\n  } catch (err) {\n    return false\n  }\n}\n\n/**\n * Validate encoded data\n *\n * @param {BaseNameOrCode} name\n * @param {Uint8Array} buf\n * @returns {void}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction validEncode (name, buf) {\n  const enc = encoding(name)\n  enc.decode(decodeText(buf))\n}\n\n/**\n * Get the encoding by name or code\n *\n * @param {BaseNameOrCode} nameOrCode\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction encoding (nameOrCode) {\n  if (Object.prototype.hasOwnProperty.call(constants.names, /** @type {BaseName} */(nameOrCode))) {\n    return constants.names[/** @type {BaseName} */(nameOrCode)]\n  } else if (Object.prototype.hasOwnProperty.call(constants.codes, /** @type {BaseCode} */(nameOrCode))) {\n    return constants.codes[/** @type {BaseCode} */(nameOrCode)]\n  } else {\n    throw new Error(`Unsupported encoding: ${nameOrCode}`)\n  }\n}\n\n/**\n * Get encoding from data\n *\n * @param {string|Uint8Array} data\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction encodingFromData (data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data)\n  }\n\n  return encoding(/** @type {BaseCode} */(data[0]))\n}\n\nexports = module.exports = multibase\nexports.encode = encode\nexports.decode = decode\nexports.isEncoded = isEncoded\nexports.encoding = encoding\nexports.encodingFromData = encodingFromData\nconst names = Object.freeze(constants.names)\nconst codes = Object.freeze(constants.codes)\nexports.names = names\nexports.codes = codes\n","'use strict'\n\n/** @typedef {import('./types').CodecFactory} CodecFactory */\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError('Invalid character ' + string[i])\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @param {number} bitsPerChar\n * @returns {CodecFactory}\n */\nconst rfc4648 = (bitsPerChar) => (alphabet) => {\n  return {\n    /**\n     * @param {Uint8Array} input\n     * @returns {string}\n     */\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    /**\n     * @param {string} input\n     * @returns {Uint8Array}\n     */\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar)\n    }\n  }\n}\n\nmodule.exports = { rfc4648 }\n","'use strict'\n\nconst textDecoder = new TextDecoder()\n/**\n * @param {ArrayBufferView|ArrayBuffer} bytes\n * @returns {string}\n */\nconst decodeText = (bytes) => textDecoder.decode(bytes)\n\nconst textEncoder = new TextEncoder()\n/**\n * @param {string} text\n * @returns {Uint8Array}\n */\nconst encodeText = (text) => textEncoder.encode(text)\n\n/**\n * Returns a new Uint8Array created by concatenating the passed Arrays\n *\n * @param {Array<ArrayLike<number>>} arrs\n * @param {number} length\n * @returns {Uint8Array}\n */\nfunction concat (arrs, length) {\n  const output = new Uint8Array(length)\n  let offset = 0\n\n  for (const arr of arrs) {\n    output.set(arr, offset)\n    offset += arr.length\n  }\n\n  return output\n}\n\nmodule.exports = { decodeText, encodeText, concat }\n","// DO NOT CHANGE THIS FILE. IT IS GENERATED BY tools/update-table.js\n/* eslint quote-props: off */\n'use strict'\n\n/**\n * @type {import('./generated-types').NameCodeMap}\n */\nconst baseTable = Object.freeze({\n  'identity': 0x00,\n  'cidv1': 0x01,\n  'cidv2': 0x02,\n  'cidv3': 0x03,\n  'ip4': 0x04,\n  'tcp': 0x06,\n  'sha1': 0x11,\n  'sha2-256': 0x12,\n  'sha2-512': 0x13,\n  'sha3-512': 0x14,\n  'sha3-384': 0x15,\n  'sha3-256': 0x16,\n  'sha3-224': 0x17,\n  'shake-128': 0x18,\n  'shake-256': 0x19,\n  'keccak-224': 0x1a,\n  'keccak-256': 0x1b,\n  'keccak-384': 0x1c,\n  'keccak-512': 0x1d,\n  'blake3': 0x1e,\n  'dccp': 0x21,\n  'murmur3-128': 0x22,\n  'murmur3-32': 0x23,\n  'ip6': 0x29,\n  'ip6zone': 0x2a,\n  'path': 0x2f,\n  'multicodec': 0x30,\n  'multihash': 0x31,\n  'multiaddr': 0x32,\n  'multibase': 0x33,\n  'dns': 0x35,\n  'dns4': 0x36,\n  'dns6': 0x37,\n  'dnsaddr': 0x38,\n  'protobuf': 0x50,\n  'cbor': 0x51,\n  'raw': 0x55,\n  'dbl-sha2-256': 0x56,\n  'rlp': 0x60,\n  'bencode': 0x63,\n  'dag-pb': 0x70,\n  'dag-cbor': 0x71,\n  'libp2p-key': 0x72,\n  'git-raw': 0x78,\n  'torrent-info': 0x7b,\n  'torrent-file': 0x7c,\n  'leofcoin-block': 0x81,\n  'leofcoin-tx': 0x82,\n  'leofcoin-pr': 0x83,\n  'sctp': 0x84,\n  'dag-jose': 0x85,\n  'dag-cose': 0x86,\n  'eth-block': 0x90,\n  'eth-block-list': 0x91,\n  'eth-tx-trie': 0x92,\n  'eth-tx': 0x93,\n  'eth-tx-receipt-trie': 0x94,\n  'eth-tx-receipt': 0x95,\n  'eth-state-trie': 0x96,\n  'eth-account-snapshot': 0x97,\n  'eth-storage-trie': 0x98,\n  'eth-receipt-log-trie': 0x99,\n  'eth-reciept-log': 0x9a,\n  'bitcoin-block': 0xb0,\n  'bitcoin-tx': 0xb1,\n  'bitcoin-witness-commitment': 0xb2,\n  'zcash-block': 0xc0,\n  'zcash-tx': 0xc1,\n  'caip-50': 0xca,\n  'streamid': 0xce,\n  'stellar-block': 0xd0,\n  'stellar-tx': 0xd1,\n  'md4': 0xd4,\n  'md5': 0xd5,\n  'bmt': 0xd6,\n  'decred-block': 0xe0,\n  'decred-tx': 0xe1,\n  'ipld-ns': 0xe2,\n  'ipfs-ns': 0xe3,\n  'swarm-ns': 0xe4,\n  'ipns-ns': 0xe5,\n  'zeronet': 0xe6,\n  'secp256k1-pub': 0xe7,\n  'bls12_381-g1-pub': 0xea,\n  'bls12_381-g2-pub': 0xeb,\n  'x25519-pub': 0xec,\n  'ed25519-pub': 0xed,\n  'bls12_381-g1g2-pub': 0xee,\n  'dash-block': 0xf0,\n  'dash-tx': 0xf1,\n  'swarm-manifest': 0xfa,\n  'swarm-feed': 0xfb,\n  'udp': 0x0111,\n  'p2p-webrtc-star': 0x0113,\n  'p2p-webrtc-direct': 0x0114,\n  'p2p-stardust': 0x0115,\n  'p2p-circuit': 0x0122,\n  'dag-json': 0x0129,\n  'udt': 0x012d,\n  'utp': 0x012e,\n  'unix': 0x0190,\n  'thread': 0x0196,\n  'p2p': 0x01a5,\n  'ipfs': 0x01a5,\n  'https': 0x01bb,\n  'onion': 0x01bc,\n  'onion3': 0x01bd,\n  'garlic64': 0x01be,\n  'garlic32': 0x01bf,\n  'tls': 0x01c0,\n  'noise': 0x01c6,\n  'quic': 0x01cc,\n  'ws': 0x01dd,\n  'wss': 0x01de,\n  'p2p-websocket-star': 0x01df,\n  'http': 0x01e0,\n  'swhid-1-snp': 0x01f0,\n  'json': 0x0200,\n  'messagepack': 0x0201,\n  'libp2p-peer-record': 0x0301,\n  'libp2p-relay-rsvp': 0x0302,\n  'car-index-sorted': 0x0400,\n  'sha2-256-trunc254-padded': 0x1012,\n  'ripemd-128': 0x1052,\n  'ripemd-160': 0x1053,\n  'ripemd-256': 0x1054,\n  'ripemd-320': 0x1055,\n  'x11': 0x1100,\n  'p256-pub': 0x1200,\n  'p384-pub': 0x1201,\n  'p521-pub': 0x1202,\n  'ed448-pub': 0x1203,\n  'x448-pub': 0x1204,\n  'ed25519-priv': 0x1300,\n  'secp256k1-priv': 0x1301,\n  'x25519-priv': 0x1302,\n  'kangarootwelve': 0x1d01,\n  'sm3-256': 0x534d,\n  'blake2b-8': 0xb201,\n  'blake2b-16': 0xb202,\n  'blake2b-24': 0xb203,\n  'blake2b-32': 0xb204,\n  'blake2b-40': 0xb205,\n  'blake2b-48': 0xb206,\n  'blake2b-56': 0xb207,\n  'blake2b-64': 0xb208,\n  'blake2b-72': 0xb209,\n  'blake2b-80': 0xb20a,\n  'blake2b-88': 0xb20b,\n  'blake2b-96': 0xb20c,\n  'blake2b-104': 0xb20d,\n  'blake2b-112': 0xb20e,\n  'blake2b-120': 0xb20f,\n  'blake2b-128': 0xb210,\n  'blake2b-136': 0xb211,\n  'blake2b-144': 0xb212,\n  'blake2b-152': 0xb213,\n  'blake2b-160': 0xb214,\n  'blake2b-168': 0xb215,\n  'blake2b-176': 0xb216,\n  'blake2b-184': 0xb217,\n  'blake2b-192': 0xb218,\n  'blake2b-200': 0xb219,\n  'blake2b-208': 0xb21a,\n  'blake2b-216': 0xb21b,\n  'blake2b-224': 0xb21c,\n  'blake2b-232': 0xb21d,\n  'blake2b-240': 0xb21e,\n  'blake2b-248': 0xb21f,\n  'blake2b-256': 0xb220,\n  'blake2b-264': 0xb221,\n  'blake2b-272': 0xb222,\n  'blake2b-280': 0xb223,\n  'blake2b-288': 0xb224,\n  'blake2b-296': 0xb225,\n  'blake2b-304': 0xb226,\n  'blake2b-312': 0xb227,\n  'blake2b-320': 0xb228,\n  'blake2b-328': 0xb229,\n  'blake2b-336': 0xb22a,\n  'blake2b-344': 0xb22b,\n  'blake2b-352': 0xb22c,\n  'blake2b-360': 0xb22d,\n  'blake2b-368': 0xb22e,\n  'blake2b-376': 0xb22f,\n  'blake2b-384': 0xb230,\n  'blake2b-392': 0xb231,\n  'blake2b-400': 0xb232,\n  'blake2b-408': 0xb233,\n  'blake2b-416': 0xb234,\n  'blake2b-424': 0xb235,\n  'blake2b-432': 0xb236,\n  'blake2b-440': 0xb237,\n  'blake2b-448': 0xb238,\n  'blake2b-456': 0xb239,\n  'blake2b-464': 0xb23a,\n  'blake2b-472': 0xb23b,\n  'blake2b-480': 0xb23c,\n  'blake2b-488': 0xb23d,\n  'blake2b-496': 0xb23e,\n  'blake2b-504': 0xb23f,\n  'blake2b-512': 0xb240,\n  'blake2s-8': 0xb241,\n  'blake2s-16': 0xb242,\n  'blake2s-24': 0xb243,\n  'blake2s-32': 0xb244,\n  'blake2s-40': 0xb245,\n  'blake2s-48': 0xb246,\n  'blake2s-56': 0xb247,\n  'blake2s-64': 0xb248,\n  'blake2s-72': 0xb249,\n  'blake2s-80': 0xb24a,\n  'blake2s-88': 0xb24b,\n  'blake2s-96': 0xb24c,\n  'blake2s-104': 0xb24d,\n  'blake2s-112': 0xb24e,\n  'blake2s-120': 0xb24f,\n  'blake2s-128': 0xb250,\n  'blake2s-136': 0xb251,\n  'blake2s-144': 0xb252,\n  'blake2s-152': 0xb253,\n  'blake2s-160': 0xb254,\n  'blake2s-168': 0xb255,\n  'blake2s-176': 0xb256,\n  'blake2s-184': 0xb257,\n  'blake2s-192': 0xb258,\n  'blake2s-200': 0xb259,\n  'blake2s-208': 0xb25a,\n  'blake2s-216': 0xb25b,\n  'blake2s-224': 0xb25c,\n  'blake2s-232': 0xb25d,\n  'blake2s-240': 0xb25e,\n  'blake2s-248': 0xb25f,\n  'blake2s-256': 0xb260,\n  'skein256-8': 0xb301,\n  'skein256-16': 0xb302,\n  'skein256-24': 0xb303,\n  'skein256-32': 0xb304,\n  'skein256-40': 0xb305,\n  'skein256-48': 0xb306,\n  'skein256-56': 0xb307,\n  'skein256-64': 0xb308,\n  'skein256-72': 0xb309,\n  'skein256-80': 0xb30a,\n  'skein256-88': 0xb30b,\n  'skein256-96': 0xb30c,\n  'skein256-104': 0xb30d,\n  'skein256-112': 0xb30e,\n  'skein256-120': 0xb30f,\n  'skein256-128': 0xb310,\n  'skein256-136': 0xb311,\n  'skein256-144': 0xb312,\n  'skein256-152': 0xb313,\n  'skein256-160': 0xb314,\n  'skein256-168': 0xb315,\n  'skein256-176': 0xb316,\n  'skein256-184': 0xb317,\n  'skein256-192': 0xb318,\n  'skein256-200': 0xb319,\n  'skein256-208': 0xb31a,\n  'skein256-216': 0xb31b,\n  'skein256-224': 0xb31c,\n  'skein256-232': 0xb31d,\n  'skein256-240': 0xb31e,\n  'skein256-248': 0xb31f,\n  'skein256-256': 0xb320,\n  'skein512-8': 0xb321,\n  'skein512-16': 0xb322,\n  'skein512-24': 0xb323,\n  'skein512-32': 0xb324,\n  'skein512-40': 0xb325,\n  'skein512-48': 0xb326,\n  'skein512-56': 0xb327,\n  'skein512-64': 0xb328,\n  'skein512-72': 0xb329,\n  'skein512-80': 0xb32a,\n  'skein512-88': 0xb32b,\n  'skein512-96': 0xb32c,\n  'skein512-104': 0xb32d,\n  'skein512-112': 0xb32e,\n  'skein512-120': 0xb32f,\n  'skein512-128': 0xb330,\n  'skein512-136': 0xb331,\n  'skein512-144': 0xb332,\n  'skein512-152': 0xb333,\n  'skein512-160': 0xb334,\n  'skein512-168': 0xb335,\n  'skein512-176': 0xb336,\n  'skein512-184': 0xb337,\n  'skein512-192': 0xb338,\n  'skein512-200': 0xb339,\n  'skein512-208': 0xb33a,\n  'skein512-216': 0xb33b,\n  'skein512-224': 0xb33c,\n  'skein512-232': 0xb33d,\n  'skein512-240': 0xb33e,\n  'skein512-248': 0xb33f,\n  'skein512-256': 0xb340,\n  'skein512-264': 0xb341,\n  'skein512-272': 0xb342,\n  'skein512-280': 0xb343,\n  'skein512-288': 0xb344,\n  'skein512-296': 0xb345,\n  'skein512-304': 0xb346,\n  'skein512-312': 0xb347,\n  'skein512-320': 0xb348,\n  'skein512-328': 0xb349,\n  'skein512-336': 0xb34a,\n  'skein512-344': 0xb34b,\n  'skein512-352': 0xb34c,\n  'skein512-360': 0xb34d,\n  'skein512-368': 0xb34e,\n  'skein512-376': 0xb34f,\n  'skein512-384': 0xb350,\n  'skein512-392': 0xb351,\n  'skein512-400': 0xb352,\n  'skein512-408': 0xb353,\n  'skein512-416': 0xb354,\n  'skein512-424': 0xb355,\n  'skein512-432': 0xb356,\n  'skein512-440': 0xb357,\n  'skein512-448': 0xb358,\n  'skein512-456': 0xb359,\n  'skein512-464': 0xb35a,\n  'skein512-472': 0xb35b,\n  'skein512-480': 0xb35c,\n  'skein512-488': 0xb35d,\n  'skein512-496': 0xb35e,\n  'skein512-504': 0xb35f,\n  'skein512-512': 0xb360,\n  'skein1024-8': 0xb361,\n  'skein1024-16': 0xb362,\n  'skein1024-24': 0xb363,\n  'skein1024-32': 0xb364,\n  'skein1024-40': 0xb365,\n  'skein1024-48': 0xb366,\n  'skein1024-56': 0xb367,\n  'skein1024-64': 0xb368,\n  'skein1024-72': 0xb369,\n  'skein1024-80': 0xb36a,\n  'skein1024-88': 0xb36b,\n  'skein1024-96': 0xb36c,\n  'skein1024-104': 0xb36d,\n  'skein1024-112': 0xb36e,\n  'skein1024-120': 0xb36f,\n  'skein1024-128': 0xb370,\n  'skein1024-136': 0xb371,\n  'skein1024-144': 0xb372,\n  'skein1024-152': 0xb373,\n  'skein1024-160': 0xb374,\n  'skein1024-168': 0xb375,\n  'skein1024-176': 0xb376,\n  'skein1024-184': 0xb377,\n  'skein1024-192': 0xb378,\n  'skein1024-200': 0xb379,\n  'skein1024-208': 0xb37a,\n  'skein1024-216': 0xb37b,\n  'skein1024-224': 0xb37c,\n  'skein1024-232': 0xb37d,\n  'skein1024-240': 0xb37e,\n  'skein1024-248': 0xb37f,\n  'skein1024-256': 0xb380,\n  'skein1024-264': 0xb381,\n  'skein1024-272': 0xb382,\n  'skein1024-280': 0xb383,\n  'skein1024-288': 0xb384,\n  'skein1024-296': 0xb385,\n  'skein1024-304': 0xb386,\n  'skein1024-312': 0xb387,\n  'skein1024-320': 0xb388,\n  'skein1024-328': 0xb389,\n  'skein1024-336': 0xb38a,\n  'skein1024-344': 0xb38b,\n  'skein1024-352': 0xb38c,\n  'skein1024-360': 0xb38d,\n  'skein1024-368': 0xb38e,\n  'skein1024-376': 0xb38f,\n  'skein1024-384': 0xb390,\n  'skein1024-392': 0xb391,\n  'skein1024-400': 0xb392,\n  'skein1024-408': 0xb393,\n  'skein1024-416': 0xb394,\n  'skein1024-424': 0xb395,\n  'skein1024-432': 0xb396,\n  'skein1024-440': 0xb397,\n  'skein1024-448': 0xb398,\n  'skein1024-456': 0xb399,\n  'skein1024-464': 0xb39a,\n  'skein1024-472': 0xb39b,\n  'skein1024-480': 0xb39c,\n  'skein1024-488': 0xb39d,\n  'skein1024-496': 0xb39e,\n  'skein1024-504': 0xb39f,\n  'skein1024-512': 0xb3a0,\n  'skein1024-520': 0xb3a1,\n  'skein1024-528': 0xb3a2,\n  'skein1024-536': 0xb3a3,\n  'skein1024-544': 0xb3a4,\n  'skein1024-552': 0xb3a5,\n  'skein1024-560': 0xb3a6,\n  'skein1024-568': 0xb3a7,\n  'skein1024-576': 0xb3a8,\n  'skein1024-584': 0xb3a9,\n  'skein1024-592': 0xb3aa,\n  'skein1024-600': 0xb3ab,\n  'skein1024-608': 0xb3ac,\n  'skein1024-616': 0xb3ad,\n  'skein1024-624': 0xb3ae,\n  'skein1024-632': 0xb3af,\n  'skein1024-640': 0xb3b0,\n  'skein1024-648': 0xb3b1,\n  'skein1024-656': 0xb3b2,\n  'skein1024-664': 0xb3b3,\n  'skein1024-672': 0xb3b4,\n  'skein1024-680': 0xb3b5,\n  'skein1024-688': 0xb3b6,\n  'skein1024-696': 0xb3b7,\n  'skein1024-704': 0xb3b8,\n  'skein1024-712': 0xb3b9,\n  'skein1024-720': 0xb3ba,\n  'skein1024-728': 0xb3bb,\n  'skein1024-736': 0xb3bc,\n  'skein1024-744': 0xb3bd,\n  'skein1024-752': 0xb3be,\n  'skein1024-760': 0xb3bf,\n  'skein1024-768': 0xb3c0,\n  'skein1024-776': 0xb3c1,\n  'skein1024-784': 0xb3c2,\n  'skein1024-792': 0xb3c3,\n  'skein1024-800': 0xb3c4,\n  'skein1024-808': 0xb3c5,\n  'skein1024-816': 0xb3c6,\n  'skein1024-824': 0xb3c7,\n  'skein1024-832': 0xb3c8,\n  'skein1024-840': 0xb3c9,\n  'skein1024-848': 0xb3ca,\n  'skein1024-856': 0xb3cb,\n  'skein1024-864': 0xb3cc,\n  'skein1024-872': 0xb3cd,\n  'skein1024-880': 0xb3ce,\n  'skein1024-888': 0xb3cf,\n  'skein1024-896': 0xb3d0,\n  'skein1024-904': 0xb3d1,\n  'skein1024-912': 0xb3d2,\n  'skein1024-920': 0xb3d3,\n  'skein1024-928': 0xb3d4,\n  'skein1024-936': 0xb3d5,\n  'skein1024-944': 0xb3d6,\n  'skein1024-952': 0xb3d7,\n  'skein1024-960': 0xb3d8,\n  'skein1024-968': 0xb3d9,\n  'skein1024-976': 0xb3da,\n  'skein1024-984': 0xb3db,\n  'skein1024-992': 0xb3dc,\n  'skein1024-1000': 0xb3dd,\n  'skein1024-1008': 0xb3de,\n  'skein1024-1016': 0xb3df,\n  'skein1024-1024': 0xb3e0,\n  'poseidon-bls12_381-a2-fc1': 0xb401,\n  'poseidon-bls12_381-a2-fc1-sc': 0xb402,\n  'zeroxcert-imprint-256': 0xce11,\n  'fil-commitment-unsealed': 0xf101,\n  'fil-commitment-sealed': 0xf102,\n  'holochain-adr-v0': 0x807124,\n  'holochain-adr-v1': 0x817124,\n  'holochain-key-v0': 0x947124,\n  'holochain-key-v1': 0x957124,\n  'holochain-sig-v0': 0xa27124,\n  'holochain-sig-v1': 0xa37124,\n  'skynet-ns': 0xb19910,\n  'arweave-ns': 0xb29910\n})\n\nmodule.exports = { baseTable }\n","/**\n * Implementation of the multicodec specification.\n *\n * @module multicodec\n * @example\n * const multicodec = require('multicodec')\n *\n * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)\n * // prefixedProtobuf 0x50...\n *\n */\n'use strict'\n\n/** @typedef {import('./generated-types').CodecName} CodecName */\n/** @typedef {import('./generated-types').CodecCode} CodecCode */\n\nconst varint = require('varint')\nconst { concat: uint8ArrayConcat } = require('uint8arrays/concat')\nconst util = require('./util')\nconst { nameToVarint, constantToCode, nameToCode, codeToName } = require('./maps')\n\n/**\n * Prefix a buffer with a multicodec-packed.\n *\n * @param {CodecName|Uint8Array} multicodecStrOrCode\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\nfunction addPrefix (multicodecStrOrCode, data) {\n  let prefix\n\n  if (multicodecStrOrCode instanceof Uint8Array) {\n    prefix = util.varintUint8ArrayEncode(multicodecStrOrCode)\n  } else {\n    if (nameToVarint[multicodecStrOrCode]) {\n      prefix = nameToVarint[multicodecStrOrCode]\n    } else {\n      throw new Error('multicodec not recognized')\n    }\n  }\n\n  return uint8ArrayConcat([prefix, data], prefix.length + data.length)\n}\n\n/**\n * Decapsulate the multicodec-packed prefix from the data.\n *\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\nfunction rmPrefix (data) {\n  varint.decode(/** @type {Buffer} */(data))\n  return data.slice(varint.decode.bytes)\n}\n\n/**\n * Get the codec name of the prefixed data.\n *\n * @param {Uint8Array} prefixedData\n * @returns {CodecName}\n */\nfunction getNameFromData (prefixedData) {\n  const code = /** @type {CodecCode} */(varint.decode(/** @type {Buffer} */(prefixedData)))\n  const name = codeToName[code]\n  if (name === undefined) {\n    throw new Error(`Code \"${code}\" not found`)\n  }\n  return name\n}\n\n/**\n * Get the codec name from a code.\n *\n * @param {CodecCode} codec\n * @returns {CodecName}\n */\nfunction getNameFromCode (codec) {\n  return codeToName[codec]\n}\n\n/**\n * Get the code of the codec\n *\n * @param {CodecName} name\n * @returns {CodecCode}\n */\nfunction getCodeFromName (name) {\n  const code = nameToCode[name]\n  if (code === undefined) {\n    throw new Error(`Codec \"${name}\" not found`)\n  }\n  return code\n}\n\n/**\n * Get the code of the prefixed data.\n *\n * @param {Uint8Array} prefixedData\n * @returns {CodecCode}\n */\nfunction getCodeFromData (prefixedData) {\n  return /** @type {CodecCode} */(varint.decode(/** @type {Buffer} */(prefixedData)))\n}\n\n/**\n * Get the code as varint of a codec name.\n *\n * @param {CodecName} name\n * @returns {Uint8Array}\n */\nfunction getVarintFromName (name) {\n  const code = nameToVarint[name]\n  if (code === undefined) {\n    throw new Error(`Codec \"${name}\" not found`)\n  }\n  return code\n}\n\n/**\n * Get the varint of a code.\n *\n * @param {CodecCode} code\n * @returns {Uint8Array}\n */\nfunction getVarintFromCode (code) {\n  return util.varintEncode(code)\n}\n\n/**\n * Get the codec name of the prefixed data.\n *\n * @deprecated use getNameFromData instead.\n * @param {Uint8Array} prefixedData\n * @returns {CodecName}\n */\nfunction getCodec (prefixedData) {\n  return getNameFromData(prefixedData)\n}\n\n/**\n * Get the codec name from a code.\n *\n * @deprecated use getNameFromCode instead.\n * @param {CodecCode} codec\n * @returns {CodecName}\n */\nfunction getName (codec) {\n  return getNameFromCode(codec)\n}\n\n/**\n * Get the code of the codec\n *\n * @deprecated use getCodeFromName instead.\n * @param {CodecName} name\n * @returns {CodecCode}\n */\nfunction getNumber (name) {\n  return getCodeFromName(name)\n}\n\n/**\n * Get the code of the prefixed data.\n *\n * @deprecated use getCodeFromData instead.\n * @param {Uint8Array} prefixedData\n * @returns {CodecCode}\n */\nfunction getCode (prefixedData) {\n  return getCodeFromData(prefixedData)\n}\n\n/**\n * Get the code as varint of a codec name.\n *\n * @deprecated use getVarintFromName instead.\n * @param {CodecName} name\n * @returns {Uint8Array}\n */\nfunction getCodeVarint (name) {\n  return getVarintFromName(name)\n}\n\n/**\n * Get the varint of a code.\n *\n * @deprecated use getVarintFromCode instead.\n * @param {CodecCode} code\n * @returns {Array.<number>}\n */\nfunction getVarint (code) {\n  return Array.from(getVarintFromCode(code))\n}\n\nmodule.exports = {\n  addPrefix,\n  rmPrefix,\n  getNameFromData,\n  getNameFromCode,\n  getCodeFromName,\n  getCodeFromData,\n  getVarintFromName,\n  getVarintFromCode,\n  // Deprecated\n  getCodec,\n  getName,\n  getNumber,\n  getCode,\n  getCodeVarint,\n  getVarint,\n  // Make the constants top-level constants\n  ...constantToCode,\n  // Export the maps\n  nameToVarint,\n  nameToCode,\n  codeToName\n}\n","'use strict'\n\n/** @typedef {import('./generated-types').ConstantCodeMap} ConstantCodeMap */\n/** @typedef {import('./generated-types').NameUint8ArrayMap} NameUint8ArrayMap */\n/** @typedef {import('./generated-types').CodeNameMap} CodeNameMap */\n/** @typedef {import('./generated-types').CodecName} CodecName */\n/** @typedef {import('./generated-types').CodecConstant} CodecConstant */\n\nconst { baseTable } = require('./generated-table')\nconst varintEncode = require('./util').varintEncode\n\nconst nameToVarint = /** @type {NameUint8ArrayMap} */ ({})\nconst constantToCode = /** @type {ConstantCodeMap} */({})\nconst codeToName = /** @type {CodeNameMap} */({})\n\n// eslint-disable-next-line guard-for-in\nfor (const name in baseTable) {\n  const codecName = /** @type {CodecName} */(name)\n  const code = baseTable[codecName]\n  nameToVarint[codecName] = varintEncode(code)\n\n  const constant = /** @type {CodecConstant} */(codecName.toUpperCase().replace(/-/g, '_'))\n  constantToCode[constant] = code\n\n  if (!codeToName[code]) {\n    codeToName[code] = codecName\n  }\n}\n\nObject.freeze(nameToVarint)\nObject.freeze(constantToCode)\nObject.freeze(codeToName)\nconst nameToCode = Object.freeze(baseTable)\nmodule.exports = {\n  nameToVarint,\n  constantToCode,\n  nameToCode,\n  codeToName\n}\n","'use strict'\n\nconst varint = require('varint')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\n\nmodule.exports = {\n  numberToUint8Array,\n  uint8ArrayToNumber,\n  varintUint8ArrayEncode,\n  varintEncode\n}\n\n/**\n * @param {Uint8Array} buf\n */\nfunction uint8ArrayToNumber (buf) {\n  return parseInt(uint8ArrayToString(buf, 'base16'), 16)\n}\n\n/**\n * @param {number} num\n */\nfunction numberToUint8Array (num) {\n  let hexString = num.toString(16)\n  if (hexString.length % 2 === 1) {\n    hexString = '0' + hexString\n  }\n  return uint8ArrayFromString(hexString, 'base16')\n}\n\n/**\n * @param {Uint8Array} input\n */\nfunction varintUint8ArrayEncode (input) {\n  return Uint8Array.from(varint.encode(uint8ArrayToNumber(input)))\n}\n\n/**\n * @param {number} num\n */\nfunction varintEncode (num) {\n  return Uint8Array.from(varint.encode(num))\n}\n","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","module.exports = read\n\nvar MSB = 0x80\n  , REST = 0x7F\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length\n\n  do {\n    if (counter >= l || shift > 49) {\n      read.bytes = 0\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++]\n    res += shift < 28\n      ? (b & REST) << shift\n      : (b & REST) * Math.pow(2, shift)\n    shift += 7\n  } while (b >= MSB)\n\n  read.bytes = counter - offset\n\n  return res\n}\n","module.exports = encode\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31)\n\nfunction encode(num, out, offset) {\n  if (Number.MAX_SAFE_INTEGER && num > Number.MAX_SAFE_INTEGER) {\n    encode.bytes = 0\n    throw new RangeError('Could not encode varint')\n  }\n  out = out || []\n  offset = offset || 0\n  var oldOffset = offset\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB\n    num /= 128\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB\n    num >>>= 7\n  }\n  out[offset] = num | 0\n  \n  encode.bytes = offset - oldOffset + 1\n  \n  return out\n}\n","module.exports = {\n    encode: require('./encode.js')\n  , decode: require('./decode.js')\n  , encodingLength: require('./length.js')\n}\n","\nvar N1 = Math.pow(2,  7)\nvar N2 = Math.pow(2, 14)\nvar N3 = Math.pow(2, 21)\nvar N4 = Math.pow(2, 28)\nvar N5 = Math.pow(2, 35)\nvar N6 = Math.pow(2, 42)\nvar N7 = Math.pow(2, 49)\nvar N8 = Math.pow(2, 56)\nvar N9 = Math.pow(2, 63)\n\nmodule.exports = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n}\n","function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nfunction bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexport { number, bool, bytes, hash, exists, output };\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n//# sourceMappingURL=_assert.js.map","export const crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n//# sourceMappingURL=crypto.js.map","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nconst u8a = (a) => a instanceof Uint8Array;\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const len = hex.length;\n    if (len % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n    const array = new Uint8Array(len / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!u8a(data))\n        throw new Error(`expected Uint8Array, got ${typeof data}`);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n    let pad = 0; // walk through each item, ensure they have proper type\n    arrays.forEach((a) => {\n        if (!u8a(a))\n            throw new Error('Uint8Array expected');\n        r.set(a, pad);\n        pad += a.length;\n    });\n    return r;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nconst toStr = {}.toString;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport function wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map","import { exists, output } from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nexport class SHA2 extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        exists(this);\n        output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n//# sourceMappingURL=_sha2.js.map","const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nexport { fromBig, split, toBig, shrSH, shrSL, rotrSH, rotrSL, rotrBH, rotrBL, rotr32H, rotr32L, rotlSH, rotlSL, rotlBH, rotlBL, add, add3L, add3H, add4L, add4H, add5H, add5L, };\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n//# sourceMappingURL=_u64.js.map","import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA512 extends SHA2 {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nclass SHA512_224 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x8c3d37c8 | 0;\n        this.Al = 0x19544da2 | 0;\n        this.Bh = 0x73e19966 | 0;\n        this.Bl = 0x89dcd4d6 | 0;\n        this.Ch = 0x1dfab7ae | 0;\n        this.Cl = 0x32ff9c82 | 0;\n        this.Dh = 0x679dd514 | 0;\n        this.Dl = 0x582f9fcf | 0;\n        this.Eh = 0x0f6d2b69 | 0;\n        this.El = 0x7bd44da8 | 0;\n        this.Fh = 0x77e36f73 | 0;\n        this.Fl = 0x04c48942 | 0;\n        this.Gh = 0x3f9d85a8 | 0;\n        this.Gl = 0x6a1d36c8 | 0;\n        this.Hh = 0x1112e6ad | 0;\n        this.Hl = 0x91d692a1 | 0;\n        this.outputLen = 28;\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexport const sha512 = /* @__PURE__ */ wrapConstructor(() => new SHA512());\nexport const sha512_224 = /* @__PURE__ */ wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = /* @__PURE__ */ wrapConstructor(() => new SHA512_256());\nexport const sha384 = /* @__PURE__ */ wrapConstructor(() => new SHA384());\n//# sourceMappingURL=sha512.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst u8a = (a) => a instanceof Uint8Array;\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nexport function numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // Big Endian\n    return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const len = hex.length;\n    if (len % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n    const array = new Uint8Array(len / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nexport function numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n        }\n    }\n    else if (u8a(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(`${title} must be hex string or Uint8Array`);\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n    let pad = 0; // walk through each item, ensure they have proper type\n    arrays.forEach((a) => {\n        if (!u8a(a))\n            throw new Error('Uint8Array expected');\n        r.set(a, pad);\n        pad += a.length;\n    });\n    return r;\n}\nexport function equalBytes(b1, b2) {\n    // We don't care about timing attacks here\n    if (b1.length !== b2.length)\n        return false;\n    for (let i = 0; i < b1.length; i++)\n        if (b1[i] !== b2[i])\n            return false;\n    return true;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nexport const bitSet = (n, pos, value) => {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n};\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || val instanceof Uint8Array,\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nexport function validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error(`Invalid validator \"${type}\", expected function`);\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n//# sourceMappingURL=utils.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport { bitMask, numberToBytesBE, numberToBytesLE, bytesToNumberBE, bytesToNumberLE, ensureBytes, validateObject, } from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n// Calculates a modulo b\nexport function mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num, power, modulo) {\n    if (modulo <= _0n || power < _0n)\n        throw new Error('Expected power/modulo > 0');\n    if (modulo === _1n)\n        return _0n;\n    let res = _1n;\n    while (power > _0n) {\n        if (power & _1n)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n// Inverses number over modulo\nexport function invert(number, modulo) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)\n        ;\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\nexport function FpSqrt(P) {\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n        // Means we cannot use sqrt for constants at all!\n        //\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n        // sqrt = (x) => {\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n        // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nexport function validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return validateObject(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n)\n        throw new Error('Expected power > 0');\n    if (power === _0n)\n        return f.ONE;\n    if (power === _1n)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nexport function FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare(f) {\n    const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n    return (x) => {\n        const p = f.pow(x, legendreConst);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n// CURVE.n lengths\nexport function nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('Field lengths over 2048 bytes are not supported');\n    const sqrtP = FpSqrt(ORDER);\n    const f = Object.freeze({\n        ORDER,\n        BITS,\n        BYTES,\n        MASK: bitMask(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n            return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\nexport function FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexport function FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = ensureBytes('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n    const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF(c, bits) {\n    const constTimeNegate = (condition, item) => {\n        const neg = item.negate();\n        return condition ? neg : item;\n    };\n    const opts = (W) => {\n        const windows = Math.ceil(bits / W) + 1; // +1, because\n        const windowSize = 2 ** (W - 1); // -1 because we skip zero\n        return { windows, windowSize };\n    };\n    return {\n        constTimeNegate,\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n) {\n            let p = c.ZERO;\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = opts(W);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = opts(W);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        wNAFCached(P, precomputesMap, n, transform) {\n            // @ts-ignore\n            const W = P._WINDOW_SIZE || 1;\n            // Calculate precomputes on a first run, reuse them after\n            let comp = precomputesMap.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) {\n                    precomputesMap.set(P, transform(comp));\n                }\n            }\n            return this.wNAF(W, comp, n);\n        },\n    };\n}\nexport function validateBasic(curve) {\n    validateField(curve.Fp);\n    validateObject(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...nLength(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n//# sourceMappingURL=curve.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y²\nimport { mod } from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes } from './utils.js';\nimport { wNAF, validateBasic } from './curve.js';\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = { zip215: true };\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(curve, {\n        hash: 'function',\n        a: 'bigint',\n        d: 'bigint',\n        randomBytes: 'function',\n    }, {\n        adjustScalarBytes: 'function',\n        domain: 'function',\n        uvRatio: 'function',\n        mapToCurve: 'function',\n    });\n    // Set defaults\n    return Object.freeze({ ...opts });\n}\n// It is not generic twisted curve for now, but ed25519/ed448 generic implementation\nexport function twistedEdwards(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER, prehash: prehash, hash: cHash, randomBytes, nByteLength, h: cofactor, } = CURVE;\n    const MASK = _2n << (BigInt(nByteLength * 8) - _1n);\n    const modP = Fp.create; // Function overrides\n    // sqrt(u/v)\n    const uvRatio = CURVE.uvRatio ||\n        ((u, v) => {\n            try {\n                return { isValid: true, value: Fp.sqrt(u * Fp.inv(v)) };\n            }\n            catch (e) {\n                return { isValid: false, value: _0n };\n            }\n        });\n    const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes) => bytes); // NOOP\n    const domain = CURVE.domain ||\n        ((data, ctx, phflag) => {\n            if (ctx.length || phflag)\n                throw new Error('Contexts/pre-hash are not supported');\n            return data;\n        }); // NOOP\n    const inBig = (n) => typeof n === 'bigint' && _0n < n; // n in [1..]\n    const inRange = (n, max) => inBig(n) && inBig(max) && n < max; // n in [1..max-1]\n    const in0MaskRange = (n) => n === _0n || inRange(n, MASK); // n in [0..MASK-1]\n    function assertInRange(n, max) {\n        // n in [1..max-1]\n        if (inRange(n, max))\n            return n;\n        throw new Error(`Expected valid scalar < ${max}, got ${typeof n} ${n}`);\n    }\n    function assertGE0(n) {\n        // n in [0..CURVE_ORDER-1]\n        return n === _0n ? n : assertInRange(n, CURVE_ORDER); // GE = prime subgroup, not full group\n    }\n    const pointPrecomputes = new Map();\n    function isPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ExtendedPoint expected');\n    }\n    // Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).\n    // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n    class Point {\n        constructor(ex, ey, ez, et) {\n            this.ex = ex;\n            this.ey = ey;\n            this.ez = ez;\n            this.et = et;\n            if (!in0MaskRange(ex))\n                throw new Error('x required');\n            if (!in0MaskRange(ey))\n                throw new Error('y required');\n            if (!in0MaskRange(ez))\n                throw new Error('z required');\n            if (!in0MaskRange(et))\n                throw new Error('t required');\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        static fromAffine(p) {\n            if (p instanceof Point)\n                throw new Error('extended point not allowed');\n            const { x, y } = p || {};\n            if (!in0MaskRange(x) || !in0MaskRange(y))\n                throw new Error('invalid affine point');\n            return new Point(x, y, _1n, modP(x * y));\n        }\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.ez));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // Not required for fromHex(), which always creates valid points.\n        // Could be useful for fromAffine().\n        assertValidity() {\n            const { a, d } = CURVE;\n            if (this.is0())\n                throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n            // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n            // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n            const { ex: X, ey: Y, ez: Z, et: T } = this;\n            const X2 = modP(X * X); // X²\n            const Y2 = modP(Y * Y); // Y²\n            const Z2 = modP(Z * Z); // Z²\n            const Z4 = modP(Z2 * Z2); // Z⁴\n            const aX2 = modP(X2 * a); // aX²\n            const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n            const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n            if (left !== right)\n                throw new Error('bad point: equation left != right (1)');\n            // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n            const XY = modP(X * Y);\n            const ZT = modP(Z * T);\n            if (XY !== ZT)\n                throw new Error('bad point: equation left != right (2)');\n        }\n        // Compare one point to another.\n        equals(other) {\n            isPoint(other);\n            const { ex: X1, ey: Y1, ez: Z1 } = this;\n            const { ex: X2, ey: Y2, ez: Z2 } = other;\n            const X1Z2 = modP(X1 * Z2);\n            const X2Z1 = modP(X2 * Z1);\n            const Y1Z2 = modP(Y1 * Z2);\n            const Y2Z1 = modP(Y2 * Z1);\n            return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        negate() {\n            // Flips point sign to a negative one (-x, y in affine coords)\n            return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n        }\n        // Fast algo for doubling Extended Point.\n        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n        // Cost: 4M + 4S + 1*a + 6add + 1*2.\n        double() {\n            const { a } = CURVE;\n            const { ex: X1, ey: Y1, ez: Z1 } = this;\n            const A = modP(X1 * X1); // A = X12\n            const B = modP(Y1 * Y1); // B = Y12\n            const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n            const D = modP(a * A); // D = a*A\n            const x1y1 = X1 + Y1;\n            const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n            const G = D + B; // G = D+B\n            const F = G - C; // F = G-C\n            const H = D - B; // H = D-B\n            const X3 = modP(E * F); // X3 = E*F\n            const Y3 = modP(G * H); // Y3 = G*H\n            const T3 = modP(E * H); // T3 = E*H\n            const Z3 = modP(F * G); // Z3 = F*G\n            return new Point(X3, Y3, Z3, T3);\n        }\n        // Fast algo for adding 2 Extended Points.\n        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n        // Cost: 9M + 1*a + 1*d + 7add.\n        add(other) {\n            isPoint(other);\n            const { a, d } = CURVE;\n            const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;\n            const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;\n            // Faster algo for adding 2 Extended Points when curve's a=-1.\n            // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4\n            // Cost: 8M + 8add + 2*2.\n            // Note: It does not check whether the `other` point is valid.\n            if (a === BigInt(-1)) {\n                const A = modP((Y1 - X1) * (Y2 + X2));\n                const B = modP((Y1 + X1) * (Y2 - X2));\n                const F = modP(B - A);\n                if (F === _0n)\n                    return this.double(); // Same point. Tests say it doesn't affect timing\n                const C = modP(Z1 * _2n * T2);\n                const D = modP(T1 * _2n * Z2);\n                const E = D + C;\n                const G = B + A;\n                const H = D - C;\n                const X3 = modP(E * F);\n                const Y3 = modP(G * H);\n                const T3 = modP(E * H);\n                const Z3 = modP(F * G);\n                return new Point(X3, Y3, Z3, T3);\n            }\n            const A = modP(X1 * X2); // A = X1*X2\n            const B = modP(Y1 * Y2); // B = Y1*Y2\n            const C = modP(T1 * d * T2); // C = T1*d*T2\n            const D = modP(Z1 * Z2); // D = Z1*Z2\n            const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n            const F = D - C; // F = D-C\n            const G = D + C; // G = D+C\n            const H = modP(B - a * A); // H = B-a*A\n            const X3 = modP(E * F); // X3 = E*F\n            const Y3 = modP(G * H); // Y3 = G*H\n            const T3 = modP(E * H); // T3 = E*H\n            const Z3 = modP(F * G); // Z3 = F*G\n            return new Point(X3, Y3, Z3, T3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, Point.normalizeZ);\n        }\n        // Constant-time multiplication.\n        multiply(scalar) {\n            const { p, f } = this.wNAF(assertInRange(scalar, CURVE_ORDER));\n            return Point.normalizeZ([p, f])[0];\n        }\n        // Non-constant-time multiplication. Uses double-and-add algorithm.\n        // It's faster, but should only be used when you don't care about\n        // an exposed private key e.g. sig verification.\n        // Does NOT allow scalars higher than CURVE.n.\n        multiplyUnsafe(scalar) {\n            let n = assertGE0(scalar); // 0 <= scalar < CURVE.n\n            if (n === _0n)\n                return I;\n            if (this.equals(I) || n === _1n)\n                return this;\n            if (this.equals(G))\n                return this.wNAF(n).p;\n            return wnaf.unsafeLadder(this, n);\n        }\n        // Checks if point is of small order.\n        // If you add something to small order point, you will have \"dirty\"\n        // point with torsion component.\n        // Multiplies point by cofactor and checks if the result is 0.\n        isSmallOrder() {\n            return this.multiplyUnsafe(cofactor).is0();\n        }\n        // Multiplies point by curve order and checks if the result is 0.\n        // Returns `false` is the point is dirty.\n        isTorsionFree() {\n            return wnaf.unsafeLadder(this, CURVE_ORDER).is0();\n        }\n        // Converts Extended point to default (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        toAffine(iz) {\n            const { ex: x, ey: y, ez: z } = this;\n            const is0 = this.is0();\n            if (iz == null)\n                iz = is0 ? _8n : Fp.inv(z); // 8 was chosen arbitrarily\n            const ax = modP(x * iz);\n            const ay = modP(y * iz);\n            const zz = modP(z * iz);\n            if (is0)\n                return { x: _0n, y: _1n };\n            if (zz !== _1n)\n                throw new Error('invZ was invalid');\n            return { x: ax, y: ay };\n        }\n        clearCofactor() {\n            const { h: cofactor } = CURVE;\n            if (cofactor === _1n)\n                return this;\n            return this.multiplyUnsafe(cofactor);\n        }\n        // Converts hash string or Uint8Array to Point.\n        // Uses algo from RFC8032 5.1.3.\n        static fromHex(hex, zip215 = false) {\n            const { d, a } = CURVE;\n            const len = Fp.BYTES;\n            hex = ensureBytes('pointHex', hex, len); // copy hex to a new array\n            const normed = hex.slice(); // copy again, we'll manipulate it\n            const lastByte = hex[len - 1]; // select last byte\n            normed[len - 1] = lastByte & ~0x80; // clear last bit\n            const y = ut.bytesToNumberLE(normed);\n            if (y === _0n) {\n                // y=0 is allowed\n            }\n            else {\n                // RFC8032 prohibits >= p, but ZIP215 doesn't\n                if (zip215)\n                    assertInRange(y, MASK); // zip215=true [1..P-1] (2^255-19-1 for ed25519)\n                else\n                    assertInRange(y, Fp.ORDER); // zip215=false [1..MASK-1] (2^256-1 for ed25519)\n            }\n            // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n            // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n            const y2 = modP(y * y); // denominator is always non-0 mod p.\n            const u = modP(y2 - _1n); // u = y² - 1\n            const v = modP(d * y2 - a); // v = d y² + 1.\n            let { isValid, value: x } = uvRatio(u, v); // √(u/v)\n            if (!isValid)\n                throw new Error('Point.fromHex: invalid y coordinate');\n            const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n            const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n            if (!zip215 && x === _0n && isLastByteOdd)\n                // if x=0 and x_0 = 1, fail\n                throw new Error('Point.fromHex: x=0 and x_0=1');\n            if (isLastByteOdd !== isXOdd)\n                x = modP(-x); // if x_0 != x mod 2, set x = p-x\n            return Point.fromAffine({ x, y });\n        }\n        static fromPrivateKey(privKey) {\n            return getExtendedPublicKey(privKey).point;\n        }\n        toRawBytes() {\n            const { x, y } = this.toAffine();\n            const bytes = ut.numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n            bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n            return bytes; // and use the last byte to encode sign of x\n        }\n        toHex() {\n            return ut.bytesToHex(this.toRawBytes()); // Same as toRawBytes, but returns string.\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    Point.ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n    const { BASE: G, ZERO: I } = Point;\n    const wnaf = wNAF(Point, nByteLength * 8);\n    function modN(a) {\n        return mod(a, CURVE_ORDER);\n    }\n    // Little-endian SHA512 with modulo n\n    function modN_LE(hash) {\n        return modN(ut.bytesToNumberLE(hash));\n    }\n    /** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */\n    function getExtendedPublicKey(key) {\n        const len = nByteLength;\n        key = ensureBytes('private key', key, len);\n        // Hash private key with curve's hash function to produce uniformingly random input\n        // Check byte lengths: ensure(64, h(ensure(32, key)))\n        const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n        const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n        const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n        const scalar = modN_LE(head); // The actual private scalar\n        const point = G.multiply(scalar); // Point on Edwards curve aka public key\n        const pointBytes = point.toRawBytes(); // Uint8Array representation\n        return { head, prefix, scalar, point, pointBytes };\n    }\n    // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n    function getPublicKey(privKey) {\n        return getExtendedPublicKey(privKey).pointBytes;\n    }\n    // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n    function hashDomainToScalar(context = new Uint8Array(), ...msgs) {\n        const msg = ut.concatBytes(...msgs);\n        return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n    }\n    /** Signs message with privateKey. RFC8032 5.1.6 */\n    function sign(msg, privKey, options = {}) {\n        msg = ensureBytes('message', msg);\n        if (prehash)\n            msg = prehash(msg); // for ed25519ph etc.\n        const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);\n        const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n        const R = G.multiply(r).toRawBytes(); // R = rG\n        const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n        const s = modN(r + k * scalar); // S = (r + k * s) mod L\n        assertGE0(s); // 0 <= s < l\n        const res = ut.concatBytes(R, ut.numberToBytesLE(s, Fp.BYTES));\n        return ensureBytes('result', res, nByteLength * 2); // 64-byte signature\n    }\n    const verifyOpts = VERIFY_DEFAULT;\n    function verify(sig, msg, publicKey, options = verifyOpts) {\n        const { context, zip215 } = options;\n        const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n        sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.\n        msg = ensureBytes('message', msg);\n        if (prehash)\n            msg = prehash(msg); // for ed25519ph, etc\n        const s = ut.bytesToNumberLE(sig.slice(len, 2 * len));\n        // zip215: true is good for consensus-critical apps and allows points < 2^256\n        // zip215: false follows RFC8032 / NIST186-5 and restricts points to CURVE.p\n        let A, R, SB;\n        try {\n            A = Point.fromHex(publicKey, zip215);\n            R = Point.fromHex(sig.slice(0, len), zip215);\n            SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n        }\n        catch (error) {\n            return false;\n        }\n        if (!zip215 && A.isSmallOrder())\n            return false;\n        const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);\n        const RkA = R.add(A.multiplyUnsafe(k));\n        // [8][S]B = [8]R + [8][k]A'\n        return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);\n    }\n    G._setWindowSize(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n    const utils = {\n        getExtendedPublicKey,\n        // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.\n        randomPrivateKey: () => randomBytes(Fp.BYTES),\n        /**\n         * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n         * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n         * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n         * @param windowSize 2, 4, 8, 16\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3));\n            return point;\n        },\n    };\n    return {\n        CURVE,\n        getPublicKey,\n        sign,\n        verify,\n        ExtendedPoint: Point,\n        utils,\n    };\n}\n//# sourceMappingURL=edwards.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha512 } from '@noble/hashes/sha512';\nimport { concatBytes, randomBytes, utf8ToBytes } from '@noble/hashes/utils';\nimport { twistedEdwards } from './abstract/edwards.js';\nimport { montgomery } from './abstract/montgomery.js';\nimport { Field, FpSqrtEven, isNegativeLE, mod, pow2 } from './abstract/modular.js';\nimport { bytesToHex, bytesToNumberLE, ensureBytes, equalBytes, numberToBytesLE, } from './abstract/utils.js';\nimport { createHasher, expand_message_xmd } from './abstract/hash-to-curve.js';\n/**\n * ed25519 Twisted Edwards curve with following addons:\n * - X25519 ECDH\n * - Ristretto cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n */\nconst ED25519_P = BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949');\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst ED25519_SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _5n = BigInt(5);\n// prettier-ignore\nconst _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);\nfunction ed25519_pow_2_252_3(x) {\n    const P = ED25519_P;\n    const x2 = (x * x) % P;\n    const b2 = (x2 * x) % P; // x^3, 11\n    const b4 = (pow2(b2, _2n, P) * b2) % P; // x^15, 1111\n    const b5 = (pow2(b4, _1n, P) * x) % P; // x^31\n    const b10 = (pow2(b5, _5n, P) * b5) % P;\n    const b20 = (pow2(b10, _10n, P) * b10) % P;\n    const b40 = (pow2(b20, _20n, P) * b20) % P;\n    const b80 = (pow2(b40, _40n, P) * b40) % P;\n    const b160 = (pow2(b80, _80n, P) * b80) % P;\n    const b240 = (pow2(b160, _80n, P) * b80) % P;\n    const b250 = (pow2(b240, _10n, P) * b10) % P;\n    const pow_p_5_8 = (pow2(b250, _2n, P) * x) % P;\n    // ^ To pow to (p+3)/8, multiply it by x.\n    return { pow_p_5_8, b2 };\n}\nfunction adjustScalarBytes(bytes) {\n    // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n    // set the three least significant bits of the first byte\n    bytes[0] &= 248; // 0b1111_1000\n    // and the most significant bit of the last to zero,\n    bytes[31] &= 127; // 0b0111_1111\n    // set the second most significant bit of the last byte to 1\n    bytes[31] |= 64; // 0b0100_0000\n    return bytes;\n}\n// sqrt(u/v)\nfunction uvRatio(u, v) {\n    const P = ED25519_P;\n    const v3 = mod(v * v * v, P); // v³\n    const v7 = mod(v3 * v3 * v, P); // v⁷\n    // (p+3)/8 and (p-5)/8\n    const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n    let x = mod(u * v3 * pow, P); // (uv³)(uv⁷)^(p-5)/8\n    const vx2 = mod(v * x * x, P); // vx²\n    const root1 = x; // First root candidate\n    const root2 = mod(x * ED25519_SQRT_M1, P); // Second root candidate\n    const useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root\n    const useRoot2 = vx2 === mod(-u, P); // If vx² = -u, set x <-- x * 2^((p-1)/4)\n    const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P); // There is no valid root, vx² = -u√(-1)\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2; // We return root2 anyway, for const-time\n    if (isNegativeLE(x, P))\n        x = mod(-x, P);\n    return { isValid: useRoot1 || useRoot2, value: x };\n}\n// Just in case\nexport const ED25519_TORSION_SUBGROUP = [\n    '0100000000000000000000000000000000000000000000000000000000000000',\n    'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n    '0000000000000000000000000000000000000000000000000000000000000080',\n    '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n    'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n    '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n    '0000000000000000000000000000000000000000000000000000000000000000',\n    'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n];\nconst Fp = Field(ED25519_P, undefined, true);\nconst ed25519Defaults = {\n    // Param: a\n    a: BigInt(-1),\n    // d is equal to -121665/121666 over finite field.\n    // Negative number is P - number, and division is invert(number, P)\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    // Finite field 𝔽p over which we'll do calculations; 2n**255n - 19n\n    Fp,\n    // Subgroup order: how many points curve has\n    // 2n**252n + 27742317777372353535851937790883648493n;\n    n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),\n    // Cofactor\n    h: BigInt(8),\n    // Base point (x, y) aka generator point\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n    hash: sha512,\n    randomBytes,\n    adjustScalarBytes,\n    // dom2\n    // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n    // Constant-time, u/√v\n    uvRatio,\n};\nexport const ed25519 = /* @__PURE__ */ twistedEdwards(ed25519Defaults);\nfunction ed25519_domain(data, ctx, phflag) {\n    if (ctx.length > 255)\n        throw new Error('Context is too big');\n    return concatBytes(utf8ToBytes('SigEd25519 no Ed25519 collisions'), new Uint8Array([phflag ? 1 : 0, ctx.length]), ctx, data);\n}\nexport const ed25519ctx = /* @__PURE__ */ twistedEdwards({\n    ...ed25519Defaults,\n    domain: ed25519_domain,\n});\nexport const ed25519ph = /* @__PURE__ */ twistedEdwards({\n    ...ed25519Defaults,\n    domain: ed25519_domain,\n    prehash: sha512,\n});\nexport const x25519 = /* @__PURE__ */ (() => montgomery({\n    P: ED25519_P,\n    a: BigInt(486662),\n    montgomeryBits: 255,\n    nByteLength: 32,\n    Gu: BigInt(9),\n    powPminus2: (x) => {\n        const P = ED25519_P;\n        // x^(p-2) aka x^(2^255-21)\n        const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);\n        return mod(pow2(pow_p_5_8, BigInt(3), P) * b2, P);\n    },\n    adjustScalarBytes,\n    randomBytes,\n}))();\n/**\n * Converts ed25519 public key to x25519 public key. Uses formula:\n * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n * @example\n *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());\n *   const aPriv = x25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))\n */\nexport function edwardsToMontgomeryPub(edwardsPub) {\n    const { y } = ed25519.ExtendedPoint.fromHex(edwardsPub);\n    const _1n = BigInt(1);\n    return Fp.toBytes(Fp.create((_1n + y) * Fp.inv(_1n - y)));\n}\nexport const edwardsToMontgomery = edwardsToMontgomeryPub; // deprecated\n/**\n * Converts ed25519 secret key to x25519 secret key.\n * @example\n *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());\n *   const aPriv = ed25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)\n */\nexport function edwardsToMontgomeryPriv(edwardsPriv) {\n    const hashed = ed25519Defaults.hash(edwardsPriv.subarray(0, 32));\n    return ed25519Defaults.adjustScalarBytes(hashed).subarray(0, 32);\n}\n// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n// SageMath returns different root first and everything falls apart\nconst ELL2_C1 = (Fp.ORDER + BigInt(3)) / BigInt(8); // 1. c1 = (q + 3) / 8       # Integer arithmetic\nconst ELL2_C2 = Fp.pow(_2n, ELL2_C1); // 2. c2 = 2^c1\nconst ELL2_C3 = Fp.sqrt(Fp.neg(Fp.ONE)); // 3. c3 = sqrt(-1)\nconst ELL2_C4 = (Fp.ORDER - BigInt(5)) / BigInt(8); // 4. c4 = (q - 5) / 8       # Integer arithmetic\nconst ELL2_J = BigInt(486662);\n// prettier-ignore\nfunction map_to_curve_elligator2_curve25519(u) {\n    let tv1 = Fp.sqr(u); //  1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, _2n); //  2.  tv1 = 2 * tv1\n    let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n    let x1n = Fp.neg(ELL2_J); //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n    let tv2 = Fp.sqr(xd); //  5.  tv2 = xd^2\n    let gxd = Fp.mul(tv2, xd); //  6.  gxd = tv2 * xd        # gxd = xd^3\n    let gx1 = Fp.mul(tv1, ELL2_J); //  7.  gx1 = J * tv1         # x1n + J * xd\n    gx1 = Fp.mul(gx1, x1n); //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n    gx1 = Fp.add(gx1, tv2); //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n    gx1 = Fp.mul(gx1, x1n); //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n    let tv3 = Fp.sqr(gxd); //  11. tv3 = gxd^2\n    tv2 = Fp.sqr(tv3); //  12. tv2 = tv3^2           # gxd^4\n    tv3 = Fp.mul(tv3, gxd); //  13. tv3 = tv3 * gxd       # gxd^3\n    tv3 = Fp.mul(tv3, gx1); //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n    tv2 = Fp.mul(tv2, tv3); //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n    let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n    y11 = Fp.mul(y11, tv3); //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n    let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n    tv2 = Fp.sqr(y11); //  19. tv2 = y11^2\n    tv2 = Fp.mul(tv2, gxd); //  20. tv2 = tv2 * gxd\n    let e1 = Fp.eql(tv2, gx1); //  21.  e1 = tv2 == gx1\n    let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n    let x2n = Fp.mul(x1n, tv1); //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n    let y21 = Fp.mul(y11, u); //  24. y21 = y11 * u\n    y21 = Fp.mul(y21, ELL2_C2); //  25. y21 = y21 * c2\n    let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n    let gx2 = Fp.mul(gx1, tv1); //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n    tv2 = Fp.sqr(y21); //  28. tv2 = y21^2\n    tv2 = Fp.mul(tv2, gxd); //  29. tv2 = tv2 * gxd\n    let e2 = Fp.eql(tv2, gx2); //  30.  e2 = tv2 == gx2\n    let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n    tv2 = Fp.sqr(y1); //  32. tv2 = y1^2\n    tv2 = Fp.mul(tv2, gxd); //  33. tv2 = tv2 * gxd\n    let e3 = Fp.eql(tv2, gx1); //  34.  e3 = tv2 == gx1\n    let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n    let y = Fp.cmov(y2, y1, e3); //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n    let e4 = Fp.isOdd(y); //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n    y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n    return { xMn: xn, xMd: xd, yMn: y, yMd: _1n }; //  39. return (xn, xd, y, 1)\n}\nconst ELL2_C1_EDWARDS = FpSqrtEven(Fp, Fp.neg(BigInt(486664))); // sgn0(c1) MUST equal 0\nfunction map_to_curve_elligator2_edwards25519(u) {\n    const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) =\n    // map_to_curve_elligator2_curve25519(u)\n    let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n    xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n    let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n    let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n    let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n    let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n    let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n    xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n    xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n    yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n    yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n    const inv = Fp.invertBatch([xd, yd]); // batch division\n    return { x: Fp.mul(xn, inv[0]), y: Fp.mul(yn, inv[1]) }; //  13. return (xn, xd, yn, yd)\n}\nconst htf = /* @__PURE__ */ (() => createHasher(ed25519.ExtendedPoint, (scalars) => map_to_curve_elligator2_edwards25519(scalars[0]), {\n    DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n    encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha512,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\nfunction assertRstPoint(other) {\n    if (!(other instanceof RistPoint))\n        throw new Error('RistrettoPoint expected');\n}\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst SQRT_M1 = ED25519_SQRT_M1;\n// √(ad - 1)\nconst SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\n// 1 / √(a-d)\nconst INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\n// 1-d²\nconst ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\n// (d-1)²\nconst D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\n// Calculates 1/√(number)\nconst invertSqrt = (number) => uvRatio(_1n, number);\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nconst bytes255ToNumberLE = (bytes) => ed25519.CURVE.Fp.create(bytesToNumberLE(bytes) & MAX_255B);\n// Computes Elligator map for Ristretto\n// https://ristretto.group/formulas/elligator.html\nfunction calcElligatorRistrettoMap(r0) {\n    const { d } = ed25519.CURVE;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const r = mod(SQRT_M1 * r0 * r0); // 1\n    const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n    let c = BigInt(-1); // 3\n    const D = mod((c - d * r) * mod(r + d)); // 4\n    let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D); // 5\n    let s_ = mod(s * r0); // 6\n    if (!isNegativeLE(s_, P))\n        s_ = mod(-s_);\n    if (!Ns_D_is_sq)\n        s = s_; // 7\n    if (!Ns_D_is_sq)\n        c = r; // 8\n    const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n    const s2 = s * s;\n    const W0 = mod((s + s) * D); // 10\n    const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n    const W2 = mod(_1n - s2); // 12\n    const W3 = mod(_1n + s2); // 13\n    return new ed25519.ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n/**\n * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448\n */\nclass RistPoint {\n    // Private property to discourage combining ExtendedPoint + RistrettoPoint\n    // Always use Ristretto encoding/decoding instead.\n    constructor(ep) {\n        this.ep = ep;\n    }\n    static fromAffine(ap) {\n        return new RistPoint(ed25519.ExtendedPoint.fromAffine(ap));\n    }\n    /**\n     * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.\n     * The hash-to-group operation applies Elligator twice and adds the results.\n     * **Note:** this is one-way map, there is no conversion from point to hash.\n     * https://ristretto.group/formulas/elligator.html\n     * @param hex 64-byte output of a hash function\n     */\n    static hashToCurve(hex) {\n        hex = ensureBytes('ristrettoHash', hex, 64);\n        const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n        const R1 = calcElligatorRistrettoMap(r1);\n        const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n        const R2 = calcElligatorRistrettoMap(r2);\n        return new RistPoint(R1.add(R2));\n    }\n    /**\n     * Converts ristretto-encoded string to ristretto point.\n     * https://ristretto.group/formulas/decoding.html\n     * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n     */\n    static fromHex(hex) {\n        hex = ensureBytes('ristrettoHex', hex, 32);\n        const { a, d } = ed25519.CURVE;\n        const P = ed25519.CURVE.Fp.ORDER;\n        const mod = ed25519.CURVE.Fp.create;\n        const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n        const s = bytes255ToNumberLE(hex);\n        // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n        // 3. Check that s is non-negative, or else abort\n        if (!equalBytes(numberToBytesLE(s, 32), hex) || isNegativeLE(s, P))\n            throw new Error(emsg);\n        const s2 = mod(s * s);\n        const u1 = mod(_1n + a * s2); // 4 (a is -1)\n        const u2 = mod(_1n - a * s2); // 5\n        const u1_2 = mod(u1 * u1);\n        const u2_2 = mod(u2 * u2);\n        const v = mod(a * d * u1_2 - u2_2); // 6\n        const { isValid, value: I } = invertSqrt(mod(v * u2_2)); // 7\n        const Dx = mod(I * u2); // 8\n        const Dy = mod(I * Dx * v); // 9\n        let x = mod((s + s) * Dx); // 10\n        if (isNegativeLE(x, P))\n            x = mod(-x); // 10\n        const y = mod(u1 * Dy); // 11\n        const t = mod(x * y); // 12\n        if (!isValid || isNegativeLE(t, P) || y === _0n)\n            throw new Error(emsg);\n        return new RistPoint(new ed25519.ExtendedPoint(x, y, _1n, t));\n    }\n    /**\n     * Encodes ristretto point to Uint8Array.\n     * https://ristretto.group/formulas/encoding.html\n     */\n    toRawBytes() {\n        let { ex: x, ey: y, ez: z, et: t } = this.ep;\n        const P = ed25519.CURVE.Fp.ORDER;\n        const mod = ed25519.CURVE.Fp.create;\n        const u1 = mod(mod(z + y) * mod(z - y)); // 1\n        const u2 = mod(x * y); // 2\n        // Square root always exists\n        const u2sq = mod(u2 * u2);\n        const { value: invsqrt } = invertSqrt(mod(u1 * u2sq)); // 3\n        const D1 = mod(invsqrt * u1); // 4\n        const D2 = mod(invsqrt * u2); // 5\n        const zInv = mod(D1 * D2 * t); // 6\n        let D; // 7\n        if (isNegativeLE(t * zInv, P)) {\n            let _x = mod(y * SQRT_M1);\n            let _y = mod(x * SQRT_M1);\n            x = _x;\n            y = _y;\n            D = mod(D1 * INVSQRT_A_MINUS_D);\n        }\n        else {\n            D = D2; // 8\n        }\n        if (isNegativeLE(x * zInv, P))\n            y = mod(-y); // 9\n        let s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))\n        if (isNegativeLE(s, P))\n            s = mod(-s);\n        return numberToBytesLE(s, 32); // 11\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    // Compare one point to another.\n    equals(other) {\n        assertRstPoint(other);\n        const { ex: X1, ey: Y1 } = this.ep;\n        const { ex: X2, ey: Y2 } = other.ep;\n        const mod = ed25519.CURVE.Fp.create;\n        // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n        const one = mod(X1 * Y2) === mod(Y1 * X2);\n        const two = mod(Y1 * Y2) === mod(X1 * X2);\n        return one || two;\n    }\n    add(other) {\n        assertRstPoint(other);\n        return new RistPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        assertRstPoint(other);\n        return new RistPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new RistPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new RistPoint(this.ep.multiplyUnsafe(scalar));\n    }\n}\nexport const RistrettoPoint = /* @__PURE__ */ (() => {\n    if (!RistPoint.BASE)\n        RistPoint.BASE = new RistPoint(ed25519.ExtendedPoint.BASE);\n    if (!RistPoint.ZERO)\n        RistPoint.ZERO = new RistPoint(ed25519.ExtendedPoint.ZERO);\n    return RistPoint;\n})();\n// Hashing to ristretto255. https://www.rfc-editor.org/rfc/rfc9380#appendix-B\nexport const hashToRistretto255 = (msg, options) => {\n    const d = options.DST;\n    const DST = typeof d === 'string' ? utf8ToBytes(d) : d;\n    const uniform_bytes = expand_message_xmd(msg, DST, 64, sha512);\n    const P = RistPoint.hashToCurve(uniform_bytes);\n    return P;\n};\nexport const hash_to_ristretto255 = hashToRistretto255; // legacy\n//# sourceMappingURL=ed25519.js.map","import { asUint8Array } from './util/as-uint8array.js';\nexport function alloc(size = 0) {\n  if (globalThis.Buffer != null && globalThis.Buffer.alloc != null) {\n    return asUint8Array(globalThis.Buffer.alloc(size));\n  }\n  return new Uint8Array(size);\n}\nexport function allocUnsafe(size = 0) {\n  if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {\n    return asUint8Array(globalThis.Buffer.allocUnsafe(size));\n  }\n  return new Uint8Array(size);\n}","import { allocUnsafe } from './alloc.js';\nimport { asUint8Array } from './util/as-uint8array.js';\nexport function concat(arrays, length) {\n  if (!length) {\n    length = arrays.reduce((acc, curr) => acc + curr.length, 0);\n  }\n  const output = allocUnsafe(length);\n  let offset = 0;\n  for (const arr of arrays) {\n    output.set(arr, offset);\n    offset += arr.length;\n  }\n  return asUint8Array(output);\n}","import bases from './util/bases.js';\nimport { asUint8Array } from './util/as-uint8array.js';\nexport function fromString(string, encoding = 'utf8') {\n  const base = bases[encoding];\n  if (!base) {\n    throw new Error(`Unsupported encoding \"${ encoding }\"`);\n  }\n  if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n    return asUint8Array(globalThis.Buffer.from(string, 'utf-8'));\n  }\n  return base.decoder.decode(`${ base.prefix }${ string }`);\n}","import bases from './util/bases.js';\nexport function toString(array, encoding = 'utf8') {\n  const base = bases[encoding];\n  if (!base) {\n    throw new Error(`Unsupported encoding \"${ encoding }\"`);\n  }\n  if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n    return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString('utf8');\n  }\n  return base.encoder.encode(array).substring(1);\n}","export function asUint8Array(buf) {\n  if (globalThis.Buffer != null) {\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n  return buf;\n}","function base(ALPHABET, name) {\n  if (ALPHABET.length >= 255) {\n    throw new TypeError('Alphabet too long');\n  }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) {\n      throw new TypeError(x + ' is ambiguous');\n    }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256);\n  var iFACTOR = Math.log(256) / Math.log(BASE);\n  function encode(source) {\n    if (source instanceof Uint8Array);\n    else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) {\n      throw new TypeError('Expected Uint8Array');\n    }\n    if (source.length === 0) {\n      return '';\n    }\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;\n    var b58 = new Uint8Array(size);\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {\n        carry += 256 * b58[it1] >>> 0;\n        b58[it1] = carry % BASE >>> 0;\n        carry = carry / BASE >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      pbegin++;\n    }\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) {\n      str += ALPHABET.charAt(b58[it2]);\n    }\n    return str;\n  }\n  function decodeUnsafe(source) {\n    if (typeof source !== 'string') {\n      throw new TypeError('Expected String');\n    }\n    if (source.length === 0) {\n      return new Uint8Array();\n    }\n    var psz = 0;\n    if (source[psz] === ' ') {\n      return;\n    }\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n    var size = (source.length - psz) * FACTOR + 1 >>> 0;\n    var b256 = new Uint8Array(size);\n    while (source[psz]) {\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n      if (carry === 255) {\n        return;\n      }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {\n        carry += BASE * b256[it3] >>> 0;\n        b256[it3] = carry % 256 >>> 0;\n        carry = carry / 256 >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      psz++;\n    }\n    if (source[psz] === ' ') {\n      return;\n    }\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch;\n  }\n  function decode(string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) {\n      return buffer;\n    }\n    throw new Error(`Non-${ name } character`);\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  };\n}\nvar src = base;\nvar _brrp__multiformats_scope_baseX = src;\nexport default _brrp__multiformats_scope_baseX;","const empty = new Uint8Array(0);\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');\nconst fromHex = hex => {\n  const hexes = hex.match(/../g);\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;\n};\nconst equals = (aa, bb) => {\n  if (aa === bb)\n    return true;\n  if (aa.byteLength !== bb.byteLength) {\n    return false;\n  }\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false;\n    }\n  }\n  return true;\n};\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')\n    return o;\n  if (o instanceof ArrayBuffer)\n    return new Uint8Array(o);\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n  }\n  throw new Error('Unknown type, must be binary type');\n};\nconst isBinary = o => o instanceof ArrayBuffer || ArrayBuffer.isView(o);\nconst fromString = str => new TextEncoder().encode(str);\nconst toString = b => new TextDecoder().decode(b);\nexport {\n  equals,\n  coerce,\n  isBinary,\n  fromHex,\n  toHex,\n  fromString,\n  toString,\n  empty\n};","import basex from '../../vendor/base-x.js';\nimport { coerce } from '../bytes.js';\nclass Encoder {\n  constructor(name, prefix, baseEncode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n  }\n  encode(bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${ this.prefix }${ this.baseEncode(bytes) }`;\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}\nclass Decoder {\n  constructor(name, prefix, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character');\n    }\n    this.prefixCodePoint = prefix.codePointAt(0);\n    this.baseDecode = baseDecode;\n  }\n  decode(text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${ JSON.stringify(text) }, ${ this.name } decoder only supports inputs prefixed with ${ this.prefix }`);\n      }\n      return this.baseDecode(text.slice(this.prefix.length));\n    } else {\n      throw Error('Can only multibase decode strings');\n    }\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n}\nclass ComposedDecoder {\n  constructor(decoders) {\n    this.decoders = decoders;\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n  decode(input) {\n    const prefix = input[0];\n    const decoder = this.decoders[prefix];\n    if (decoder) {\n      return decoder.decode(input);\n    } else {\n      throw RangeError(`Unable to decode multibase string ${ JSON.stringify(input) }, only inputs prefixed with ${ Object.keys(this.decoders) } are supported`);\n    }\n  }\n}\nexport const or = (left, right) => new ComposedDecoder({\n  ...left.decoders || { [left.prefix]: left },\n  ...right.decoders || { [right.prefix]: right }\n});\nexport class Codec {\n  constructor(name, prefix, baseEncode, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n    this.baseDecode = baseDecode;\n    this.encoder = new Encoder(name, prefix, baseEncode);\n    this.decoder = new Decoder(name, prefix, baseDecode);\n  }\n  encode(input) {\n    return this.encoder.encode(input);\n  }\n  decode(input) {\n    return this.decoder.decode(input);\n  }\n}\nexport const from = ({name, prefix, encode, decode}) => new Codec(name, prefix, encode, decode);\nexport const baseX = ({prefix, name, alphabet}) => {\n  const {encode, decode} = basex(alphabet, name);\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: text => coerce(decode(text))\n  });\n};\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  const codes = {};\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i;\n  }\n  let end = string.length;\n  while (string[end - 1] === '=') {\n    --end;\n  }\n  const out = new Uint8Array(end * bitsPerChar / 8 | 0);\n  let bits = 0;\n  let buffer = 0;\n  let written = 0;\n  for (let i = 0; i < end; ++i) {\n    const value = codes[string[i]];\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${ name } character`);\n    }\n    buffer = buffer << bitsPerChar | value;\n    bits += bitsPerChar;\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 255 & buffer >> bits;\n    }\n  }\n  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n  return out;\n};\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '=';\n  const mask = (1 << bitsPerChar) - 1;\n  let out = '';\n  let bits = 0;\n  let buffer = 0;\n  for (let i = 0; i < data.length; ++i) {\n    buffer = buffer << 8 | data[i];\n    bits += 8;\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar;\n      out += alphabet[mask & buffer >> bits];\n    }\n  }\n  if (bits) {\n    out += alphabet[mask & buffer << bitsPerChar - bits];\n  }\n  if (pad) {\n    while (out.length * bitsPerChar & 7) {\n      out += '=';\n    }\n  }\n  return out;\n};\nexport const rfc4648 = ({name, prefix, bitsPerChar, alphabet}) => {\n  return from({\n    prefix,\n    name,\n    encode(input) {\n      return encode(input, alphabet, bitsPerChar);\n    },\n    decode(input) {\n      return decode(input, alphabet, bitsPerChar, name);\n    }\n  });\n};","import { from } from './base.js';\nimport {\n  fromString,\n  toString\n} from '../bytes.js';\nexport const identity = from({\n  prefix: '\\0',\n  name: 'identity',\n  encode: buf => toString(buf),\n  decode: str => fromString(str)\n});","import { rfc4648 } from './base.js';\nexport const base2 = rfc4648({\n  prefix: '0',\n  name: 'base2',\n  alphabet: '01',\n  bitsPerChar: 1\n});","import { rfc4648 } from './base.js';\nexport const base8 = rfc4648({\n  prefix: '7',\n  name: 'base8',\n  alphabet: '01234567',\n  bitsPerChar: 3\n});","import { baseX } from './base.js';\nexport const base10 = baseX({\n  prefix: '9',\n  name: 'base10',\n  alphabet: '0123456789'\n});","import { rfc4648 } from './base.js';\nexport const base16 = rfc4648({\n  prefix: 'f',\n  name: 'base16',\n  alphabet: '0123456789abcdef',\n  bitsPerChar: 4\n});\nexport const base16upper = rfc4648({\n  prefix: 'F',\n  name: 'base16upper',\n  alphabet: '0123456789ABCDEF',\n  bitsPerChar: 4\n});","import { rfc4648 } from './base.js';\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n});\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n});\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n});\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n});\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n});\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n});\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n});\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n});\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n});","import { baseX } from './base.js';\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n});\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n});","import { baseX } from './base.js';\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n});\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n});","import { rfc4648 } from './base.js';\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n});\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n});\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n});\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n});","import { from } from './base.js';\nconst alphabet = Array.from('\\uD83D\\uDE80\\uD83E\\uDE90\\u2604\\uD83D\\uDEF0\\uD83C\\uDF0C\\uD83C\\uDF11\\uD83C\\uDF12\\uD83C\\uDF13\\uD83C\\uDF14\\uD83C\\uDF15\\uD83C\\uDF16\\uD83C\\uDF17\\uD83C\\uDF18\\uD83C\\uDF0D\\uD83C\\uDF0F\\uD83C\\uDF0E\\uD83D\\uDC09\\u2600\\uD83D\\uDCBB\\uD83D\\uDDA5\\uD83D\\uDCBE\\uD83D\\uDCBF\\uD83D\\uDE02\\u2764\\uD83D\\uDE0D\\uD83E\\uDD23\\uD83D\\uDE0A\\uD83D\\uDE4F\\uD83D\\uDC95\\uD83D\\uDE2D\\uD83D\\uDE18\\uD83D\\uDC4D\\uD83D\\uDE05\\uD83D\\uDC4F\\uD83D\\uDE01\\uD83D\\uDD25\\uD83E\\uDD70\\uD83D\\uDC94\\uD83D\\uDC96\\uD83D\\uDC99\\uD83D\\uDE22\\uD83E\\uDD14\\uD83D\\uDE06\\uD83D\\uDE44\\uD83D\\uDCAA\\uD83D\\uDE09\\u263A\\uD83D\\uDC4C\\uD83E\\uDD17\\uD83D\\uDC9C\\uD83D\\uDE14\\uD83D\\uDE0E\\uD83D\\uDE07\\uD83C\\uDF39\\uD83E\\uDD26\\uD83C\\uDF89\\uD83D\\uDC9E\\u270C\\u2728\\uD83E\\uDD37\\uD83D\\uDE31\\uD83D\\uDE0C\\uD83C\\uDF38\\uD83D\\uDE4C\\uD83D\\uDE0B\\uD83D\\uDC97\\uD83D\\uDC9A\\uD83D\\uDE0F\\uD83D\\uDC9B\\uD83D\\uDE42\\uD83D\\uDC93\\uD83E\\uDD29\\uD83D\\uDE04\\uD83D\\uDE00\\uD83D\\uDDA4\\uD83D\\uDE03\\uD83D\\uDCAF\\uD83D\\uDE48\\uD83D\\uDC47\\uD83C\\uDFB6\\uD83D\\uDE12\\uD83E\\uDD2D\\u2763\\uD83D\\uDE1C\\uD83D\\uDC8B\\uD83D\\uDC40\\uD83D\\uDE2A\\uD83D\\uDE11\\uD83D\\uDCA5\\uD83D\\uDE4B\\uD83D\\uDE1E\\uD83D\\uDE29\\uD83D\\uDE21\\uD83E\\uDD2A\\uD83D\\uDC4A\\uD83E\\uDD73\\uD83D\\uDE25\\uD83E\\uDD24\\uD83D\\uDC49\\uD83D\\uDC83\\uD83D\\uDE33\\u270B\\uD83D\\uDE1A\\uD83D\\uDE1D\\uD83D\\uDE34\\uD83C\\uDF1F\\uD83D\\uDE2C\\uD83D\\uDE43\\uD83C\\uDF40\\uD83C\\uDF37\\uD83D\\uDE3B\\uD83D\\uDE13\\u2B50\\u2705\\uD83E\\uDD7A\\uD83C\\uDF08\\uD83D\\uDE08\\uD83E\\uDD18\\uD83D\\uDCA6\\u2714\\uD83D\\uDE23\\uD83C\\uDFC3\\uD83D\\uDC90\\u2639\\uD83C\\uDF8A\\uD83D\\uDC98\\uD83D\\uDE20\\u261D\\uD83D\\uDE15\\uD83C\\uDF3A\\uD83C\\uDF82\\uD83C\\uDF3B\\uD83D\\uDE10\\uD83D\\uDD95\\uD83D\\uDC9D\\uD83D\\uDE4A\\uD83D\\uDE39\\uD83D\\uDDE3\\uD83D\\uDCAB\\uD83D\\uDC80\\uD83D\\uDC51\\uD83C\\uDFB5\\uD83E\\uDD1E\\uD83D\\uDE1B\\uD83D\\uDD34\\uD83D\\uDE24\\uD83C\\uDF3C\\uD83D\\uDE2B\\u26BD\\uD83E\\uDD19\\u2615\\uD83C\\uDFC6\\uD83E\\uDD2B\\uD83D\\uDC48\\uD83D\\uDE2E\\uD83D\\uDE46\\uD83C\\uDF7B\\uD83C\\uDF43\\uD83D\\uDC36\\uD83D\\uDC81\\uD83D\\uDE32\\uD83C\\uDF3F\\uD83E\\uDDE1\\uD83C\\uDF81\\u26A1\\uD83C\\uDF1E\\uD83C\\uDF88\\u274C\\u270A\\uD83D\\uDC4B\\uD83D\\uDE30\\uD83E\\uDD28\\uD83D\\uDE36\\uD83E\\uDD1D\\uD83D\\uDEB6\\uD83D\\uDCB0\\uD83C\\uDF53\\uD83D\\uDCA2\\uD83E\\uDD1F\\uD83D\\uDE41\\uD83D\\uDEA8\\uD83D\\uDCA8\\uD83E\\uDD2C\\u2708\\uD83C\\uDF80\\uD83C\\uDF7A\\uD83E\\uDD13\\uD83D\\uDE19\\uD83D\\uDC9F\\uD83C\\uDF31\\uD83D\\uDE16\\uD83D\\uDC76\\uD83E\\uDD74\\u25B6\\u27A1\\u2753\\uD83D\\uDC8E\\uD83D\\uDCB8\\u2B07\\uD83D\\uDE28\\uD83C\\uDF1A\\uD83E\\uDD8B\\uD83D\\uDE37\\uD83D\\uDD7A\\u26A0\\uD83D\\uDE45\\uD83D\\uDE1F\\uD83D\\uDE35\\uD83D\\uDC4E\\uD83E\\uDD32\\uD83E\\uDD20\\uD83E\\uDD27\\uD83D\\uDCCC\\uD83D\\uDD35\\uD83D\\uDC85\\uD83E\\uDDD0\\uD83D\\uDC3E\\uD83C\\uDF52\\uD83D\\uDE17\\uD83E\\uDD11\\uD83C\\uDF0A\\uD83E\\uDD2F\\uD83D\\uDC37\\u260E\\uD83D\\uDCA7\\uD83D\\uDE2F\\uD83D\\uDC86\\uD83D\\uDC46\\uD83C\\uDFA4\\uD83D\\uDE47\\uD83C\\uDF51\\u2744\\uD83C\\uDF34\\uD83D\\uDCA3\\uD83D\\uDC38\\uD83D\\uDC8C\\uD83D\\uDCCD\\uD83E\\uDD40\\uD83E\\uDD22\\uD83D\\uDC45\\uD83D\\uDCA1\\uD83D\\uDCA9\\uD83D\\uDC50\\uD83D\\uDCF8\\uD83D\\uDC7B\\uD83E\\uDD10\\uD83E\\uDD2E\\uD83C\\uDFBC\\uD83E\\uDD75\\uD83D\\uDEA9\\uD83C\\uDF4E\\uD83C\\uDF4A\\uD83D\\uDC7C\\uD83D\\uDC8D\\uD83D\\uDCE3\\uD83E\\uDD42');\nconst alphabetBytesToChars = alphabet.reduce((p, c, i) => {\n  p[i] = c;\n  return p;\n}, []);\nconst alphabetCharsToBytes = alphabet.reduce((p, c, i) => {\n  p[c.codePointAt(0)] = i;\n  return p;\n}, []);\nfunction encode(data) {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c];\n    return p;\n  }, '');\n}\nfunction decode(str) {\n  const byts = [];\n  for (const char of str) {\n    const byt = alphabetCharsToBytes[char.codePointAt(0)];\n    if (byt === undefined) {\n      throw new Error(`Non-base256emoji character: ${ char }`);\n    }\n    byts.push(byt);\n  }\n  return new Uint8Array(byts);\n}\nexport const base256emoji = from({\n  prefix: '\\uD83D\\uDE80',\n  name: 'base256emoji',\n  encode,\n  decode\n});","var encode_1 = encode;\nvar MSB = 128, REST = 127, MSBALL = ~REST, INT = Math.pow(2, 31);\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n  while (num >= INT) {\n    out[offset++] = num & 255 | MSB;\n    num /= 128;\n  }\n  while (num & MSBALL) {\n    out[offset++] = num & 255 | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  encode.bytes = offset - oldOffset + 1;\n  return out;\n}\nvar decode = read;\nvar MSB$1 = 128, REST$1 = 127;\nfunction read(buf, offset) {\n  var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint');\n    }\n    b = buf[counter++];\n    res += shift < 28 ? (b & REST$1) << shift : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1);\n  read.bytes = counter - offset;\n  return res;\n}\nvar N1 = Math.pow(2, 7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\nvar length = function (value) {\n  return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;\n};\nvar varint = {\n  encode: encode_1,\n  decode: decode,\n  encodingLength: length\n};\nvar _brrp_varint = varint;\nexport default _brrp_varint;","import varint from '../vendor/varint.js';\nexport const decode = (data, offset = 0) => {\n  const code = varint.decode(data, offset);\n  return [\n    code,\n    varint.decode.bytes\n  ];\n};\nexport const encodeTo = (int, target, offset = 0) => {\n  varint.encode(int, target, offset);\n  return target;\n};\nexport const encodingLength = int => {\n  return varint.encodingLength(int);\n};","import {\n  coerce,\n  equals as equalBytes\n} from '../bytes.js';\nimport * as varint from '../varint.js';\nexport const create = (code, digest) => {\n  const size = digest.byteLength;\n  const sizeOffset = varint.encodingLength(code);\n  const digestOffset = sizeOffset + varint.encodingLength(size);\n  const bytes = new Uint8Array(digestOffset + size);\n  varint.encodeTo(code, bytes, 0);\n  varint.encodeTo(size, bytes, sizeOffset);\n  bytes.set(digest, digestOffset);\n  return new Digest(code, size, digest, bytes);\n};\nexport const decode = multihash => {\n  const bytes = coerce(multihash);\n  const [code, sizeOffset] = varint.decode(bytes);\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset));\n  const digest = bytes.subarray(sizeOffset + digestOffset);\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length');\n  }\n  return new Digest(code, size, digest, bytes);\n};\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true;\n  } else {\n    return a.code === b.code && a.size === b.size && equalBytes(a.bytes, b.bytes);\n  }\n};\nexport class Digest {\n  constructor(code, size, digest, bytes) {\n    this.code = code;\n    this.size = size;\n    this.digest = digest;\n    this.bytes = bytes;\n  }\n}","import * as Digest from './digest.js';\nexport const from = ({name, code, encode}) => new Hasher(name, code, encode);\nexport class Hasher {\n  constructor(name, code, encode) {\n    this.name = name;\n    this.code = code;\n    this.encode = encode;\n  }\n  digest(input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input);\n      return result instanceof Uint8Array ? Digest.create(this.code, result) : result.then(digest => Digest.create(this.code, digest));\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}","import { from } from './hasher.js';\nconst sha = name => async data => new Uint8Array(await crypto.subtle.digest(name, data));\nexport const sha256 = from({\n  name: 'sha2-256',\n  code: 18,\n  encode: sha('SHA-256')\n});\nexport const sha512 = from({\n  name: 'sha2-512',\n  code: 19,\n  encode: sha('SHA-512')\n});","import { coerce } from '../bytes.js';\nimport * as Digest from './digest.js';\nconst code = 0;\nconst name = 'identity';\nconst encode = coerce;\nconst digest = input => Digest.create(code, encode(input));\nexport const identity = {\n  code,\n  name,\n  encode,\n  digest\n};","import { coerce } from '../bytes.js';\nexport const name = 'raw';\nexport const code = 85;\nexport const encode = node => coerce(node);\nexport const decode = data => coerce(data);","const textEncoder = new TextEncoder();\nconst textDecoder = new TextDecoder();\nexport const name = 'json';\nexport const code = 512;\nexport const encode = node => textEncoder.encode(JSON.stringify(node));\nexport const decode = data => JSON.parse(textDecoder.decode(data));","import * as varint from './varint.js';\nimport * as Digest from './hashes/digest.js';\nimport { base58btc } from './bases/base58.js';\nimport { base32 } from './bases/base32.js';\nimport { coerce } from './bytes.js';\nexport class CID {\n  constructor(version, code, multihash, bytes) {\n    this.code = code;\n    this.version = version;\n    this.multihash = multihash;\n    this.bytes = bytes;\n    this.byteOffset = bytes.byteOffset;\n    this.byteLength = bytes.byteLength;\n    this.asCID = this;\n    this._baseCache = new Map();\n    Object.defineProperties(this, {\n      byteOffset: hidden,\n      byteLength: hidden,\n      code: readonly,\n      version: readonly,\n      multihash: readonly,\n      bytes: readonly,\n      _baseCache: hidden,\n      asCID: hidden\n    });\n  }\n  toV0() {\n    switch (this.version) {\n    case 0: {\n        return this;\n      }\n    default: {\n        const {code, multihash} = this;\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n        }\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n        }\n        return CID.createV0(multihash);\n      }\n    }\n  }\n  toV1() {\n    switch (this.version) {\n    case 0: {\n        const {code, digest} = this.multihash;\n        const multihash = Digest.create(code, digest);\n        return CID.createV1(this.code, multihash);\n      }\n    case 1: {\n        return this;\n      }\n    default: {\n        throw Error(`Can not convert CID version ${ this.version } to version 0. This is a bug please report`);\n      }\n    }\n  }\n  equals(other) {\n    return other && this.code === other.code && this.version === other.version && Digest.equals(this.multihash, other.multihash);\n  }\n  toString(base) {\n    const {bytes, version, _baseCache} = this;\n    switch (version) {\n    case 0:\n      return toStringV0(bytes, _baseCache, base || base58btc.encoder);\n    default:\n      return toStringV1(bytes, _baseCache, base || base32.encoder);\n    }\n  }\n  toJSON() {\n    return {\n      code: this.code,\n      version: this.version,\n      hash: this.multihash.bytes\n    };\n  }\n  get [Symbol.toStringTag]() {\n    return 'CID';\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return 'CID(' + this.toString() + ')';\n  }\n  static isCID(value) {\n    deprecate(/^0\\.0/, IS_CID_DEPRECATION);\n    return !!(value && (value[cidSymbol] || value.asCID === value));\n  }\n  get toBaseEncodedString() {\n    throw new Error('Deprecated, use .toString()');\n  }\n  get codec() {\n    throw new Error('\"codec\" property is deprecated, use integer \"code\" property instead');\n  }\n  get buffer() {\n    throw new Error('Deprecated .buffer property, use .bytes to get Uint8Array instead');\n  }\n  get multibaseName() {\n    throw new Error('\"multibaseName\" property is deprecated');\n  }\n  get prefix() {\n    throw new Error('\"prefix\" property is deprecated');\n  }\n  static asCID(value) {\n    if (value instanceof CID) {\n      return value;\n    } else if (value != null && value.asCID === value) {\n      const {version, code, multihash, bytes} = value;\n      return new CID(version, code, multihash, bytes || encodeCID(version, code, multihash.bytes));\n    } else if (value != null && value[cidSymbol] === true) {\n      const {version, multihash, code} = value;\n      const digest = Digest.decode(multihash);\n      return CID.create(version, code, digest);\n    } else {\n      return null;\n    }\n  }\n  static create(version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported');\n    }\n    switch (version) {\n    case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(`Version 0 CID must use dag-pb (code: ${ DAG_PB_CODE }) block encoding`);\n        } else {\n          return new CID(version, code, digest, digest.bytes);\n        }\n      }\n    case 1: {\n        const bytes = encodeCID(version, code, digest.bytes);\n        return new CID(version, code, digest, bytes);\n      }\n    default: {\n        throw new Error('Invalid version');\n      }\n    }\n  }\n  static createV0(digest) {\n    return CID.create(0, DAG_PB_CODE, digest);\n  }\n  static createV1(code, digest) {\n    return CID.create(1, code, digest);\n  }\n  static decode(bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes);\n    if (remainder.length) {\n      throw new Error('Incorrect length');\n    }\n    return cid;\n  }\n  static decodeFirst(bytes) {\n    const specs = CID.inspectBytes(bytes);\n    const prefixSize = specs.size - specs.multihashSize;\n    const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length');\n    }\n    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\n    const digest = new Digest.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\n    const cid = specs.version === 0 ? CID.createV0(digest) : CID.createV1(specs.codec, digest);\n    return [\n      cid,\n      bytes.subarray(specs.size)\n    ];\n  }\n  static inspectBytes(initialBytes) {\n    let offset = 0;\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset));\n      offset += length;\n      return i;\n    };\n    let version = next();\n    let codec = DAG_PB_CODE;\n    if (version === 18) {\n      version = 0;\n      offset = 0;\n    } else if (version === 1) {\n      codec = next();\n    }\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${ version }`);\n    }\n    const prefixSize = offset;\n    const multihashCode = next();\n    const digestSize = next();\n    const size = offset + digestSize;\n    const multihashSize = size - prefixSize;\n    return {\n      version,\n      codec,\n      multihashCode,\n      digestSize,\n      multihashSize,\n      size\n    };\n  }\n  static parse(source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base);\n    const cid = CID.decode(bytes);\n    cid._baseCache.set(prefix, source);\n    return cid;\n  }\n}\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n  case 'Q': {\n      const decoder = base || base58btc;\n      return [\n        base58btc.prefix,\n        decoder.decode(`${ base58btc.prefix }${ source }`)\n      ];\n    }\n  case base58btc.prefix: {\n      const decoder = base || base58btc;\n      return [\n        base58btc.prefix,\n        decoder.decode(source)\n      ];\n    }\n  case base32.prefix: {\n      const decoder = base || base32;\n      return [\n        base32.prefix,\n        decoder.decode(source)\n      ];\n    }\n  default: {\n      if (base == null) {\n        throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');\n      }\n      return [\n        source[0],\n        base.decode(source)\n      ];\n    }\n  }\n};\nconst toStringV0 = (bytes, cache, base) => {\n  const {prefix} = base;\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${ base.name } encoding`);\n  }\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst toStringV1 = (bytes, cache, base) => {\n  const {prefix} = base;\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst DAG_PB_CODE = 112;\nconst SHA_256_CODE = 18;\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version);\n  const hashOffset = codeOffset + varint.encodingLength(code);\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength);\n  varint.encodeTo(version, bytes, 0);\n  varint.encodeTo(code, bytes, codeOffset);\n  bytes.set(multihash, hashOffset);\n  return bytes;\n};\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID');\nconst readonly = {\n  writable: false,\n  configurable: false,\n  enumerable: true\n};\nconst hidden = {\n  writable: false,\n  enumerable: false,\n  configurable: false\n};\nconst version = '0.0.0-dev';\nconst deprecate = (range, message) => {\n  if (range.test(version)) {\n    console.warn(message);\n  } else {\n    throw new Error(message);\n  }\n};\nconst IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.\nFollowing code pattern:\n\nif (CID.isCID(value)) {\n  doSomethingWithCID(value)\n}\n\nIs replaced with:\n\nconst cid = CID.asCID(value)\nif (cid) {\n  // Make sure to use cid instead of value\n  doSomethingWithCID(cid)\n}\n`;","import * as identityBase from './bases/identity.js';\nimport * as base2 from './bases/base2.js';\nimport * as base8 from './bases/base8.js';\nimport * as base10 from './bases/base10.js';\nimport * as base16 from './bases/base16.js';\nimport * as base32 from './bases/base32.js';\nimport * as base36 from './bases/base36.js';\nimport * as base58 from './bases/base58.js';\nimport * as base64 from './bases/base64.js';\nimport * as base256emoji from './bases/base256emoji.js';\nimport * as sha2 from './hashes/sha2.js';\nimport * as identity from './hashes/identity.js';\nimport * as raw from './codecs/raw.js';\nimport * as json from './codecs/json.js';\nimport {\n  CID,\n  hasher,\n  digest,\n  varint,\n  bytes\n} from './index.js';\nconst bases = {\n  ...identityBase,\n  ...base2,\n  ...base8,\n  ...base10,\n  ...base16,\n  ...base32,\n  ...base36,\n  ...base58,\n  ...base64,\n  ...base256emoji\n};\nconst hashes = {\n  ...sha2,\n  ...identity\n};\nconst codecs = {\n  raw,\n  json\n};\nexport {\n  CID,\n  hasher,\n  digest,\n  varint,\n  bytes,\n  hashes,\n  bases,\n  codecs\n};","import { bases } from 'multiformats/basics';\nimport { allocUnsafe } from '../alloc.js';\nfunction createCodec(name, prefix, encode, decode) {\n  return {\n    name,\n    prefix,\n    encoder: {\n      name,\n      prefix,\n      encode\n    },\n    decoder: { decode }\n  };\n}\nconst string = createCodec('utf8', 'u', buf => {\n  const decoder = new TextDecoder('utf8');\n  return 'u' + decoder.decode(buf);\n}, str => {\n  const encoder = new TextEncoder();\n  return encoder.encode(str.substring(1));\n});\nconst ascii = createCodec('ascii', 'a', buf => {\n  let string = 'a';\n  for (let i = 0; i < buf.length; i++) {\n    string += String.fromCharCode(buf[i]);\n  }\n  return string;\n}, str => {\n  str = str.substring(1);\n  const buf = allocUnsafe(str.length);\n  for (let i = 0; i < str.length; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n});\nconst BASES = {\n  utf8: string,\n  'utf-8': string,\n  hex: bases.base16,\n  latin1: ascii,\n  ascii: ascii,\n  binary: ascii,\n  ...bases\n};\nexport default BASES;"],"names":["module","exports","ALPHABET","length","TypeError","BASE_MAP","Uint8Array","j","i","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","Math","log","iFACTOR","decodeUnsafe","source","psz","zeroes","size","b256","carry","it3","Error","it4","vch","encode","ArrayBuffer","isView","buffer","byteOffset","byteLength","Array","isArray","from","pbegin","pend","b58","it1","it2","str","repeat","decode","string","wasm","__wbg_set_wasm","val","heap","fill","undefined","getObject","idx","push","heap_next","takeObject","ret","dropObject","WASM_VECTOR_LEN","cachedUint8Memory0","getUint8Memory0","memory","cachedTextEncoder","TextEncoder","require","encodeString","encodeInto","arg","view","buf","set","read","written","passStringToWasm0","malloc","realloc","ptr","subarray","len","mem","offset","code","slice","isLikeNone","cachedInt32Memory0","getInt32Memory0","Int32Array","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","getStringFromWasm0","addHeapObject","obj","debugString","type","description","name","debug","builtInMatches","exec","toString","call","className","JSON","stringify","_","message","stack","__wbg_adapter_30","arg0","arg1","arg2","_dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h13e646700cf6c015","handleError","f","args","apply","this","e","__wbindgen_exn_store","FromPrior","__wrap","Object","create","prototype","__destroy_into_raw","free","__wbg_fromprior_free","unpack","from_prior","did_resolver","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","fromprior_unpack","constructor","value","retptr","__wbindgen_add_to_stack_pointer","fromprior_new","r0","r1","as_value","fromprior_as_value","pack","issuer_kid","secrets_resolver","fromprior_pack","Message","__wbg_message_free","pack_encrypted","to","sign_by","options","ptr1","len1","ptr2","len2","message_pack_encrypted","pack_plaintext","message_pack_plaintext","message_new","message_as_value","wrap_in_forward","msg","headers","routing_keys","enc_alg_anon","message_wrap_in_forward","try_parse_forward","message_try_parse_forward","pack_signed","message_pack_signed","message_unpack","__wbindgen_object_drop_ref","__wbg_fromprior_new","__wbg_message_new","__wbindgen_string_get","__wbindgen_string_new","__wbg_getsecret_ccfcf375746a12ac","get_secret","arguments","__wbg_findsecrets_98c99bb5926b9d22","find_secrets","__wbindgen_json_parse","parse","__wbindgen_json_serialize","__wbg_resolve_67047def68d50f12","resolve","__wbg_new_abda76e883ba8a5f","__wbg_stack_658279fe44541cf6","__wbg_error_f851667af71bcfc6","console","error","__wbindgen_free","__wbindgen_cb_drop","original","cnt","a","__wbg_crypto_70a96de3b6b73dac","crypto","__wbindgen_is_object","__wbg_process_dd1577445152112e","process","__wbg_versions_58036bec3add9e6f","versions","__wbg_node_6a9d28205ed5b0d8","node","__wbindgen_is_string","__wbg_require_f05d779769764e82","__wbg_msCrypto_adbc770ec9eca9c7","msCrypto","__wbg_getRandomValues_3774744e221a22ad","getRandomValues","__wbg_randomFillSync_e950366c42764a07","randomFillSync","__wbg_get_27fe3dac1c4d0224","__wbg_length_e498fbc24f9c1d4f","__wbg_new_b525de17f44a8943","__wbindgen_is_function","__wbg_newnoargs_2b8b6bd7753c76ba","Function","__wbg_call_95d1ea488d03e4e8","__wbg_self_e7c1f827057f6584","self","__wbg_window_a09ec664e14b1b81","window","__wbg_globalThis_87cbb8506fecf3a9","globalThis","__wbg_global_c85a9259e621f3db","g","global","__wbindgen_is_undefined","__wbg_newwithlength_0da6f12fbc1ab6eb","__wbg_set_17224bc548dd1d7b","__wbg_isArray_39d28997bf6b96b4","__wbg_push_49c286f04dd3bf59","__wbg_instanceof_Error_749a7378f4439ee0","result","__wbg_new_15d3966e9981a196","__wbg_message_a95c3ef248e4b57a","__wbg_name_c69a20c4b1197dc0","__wbg_setname_7eace1cb10ca6787","__wbg_call_9495de66fdbe016b","__wbg_new_9d3a9ce4282a18a8","state0","b","Promise","arg3","wasm_bindgen__convert__closures__invoke2_mut__h68672ab3ea60d469","__wbg_adapter_106","__wbg_resolve_fd40f858d9db1a04","__wbg_then_ec5db6d509eb475f","then","__wbg_then_f753623316e2873a","__wbg_buffer_cf65c07de34b9a08","__wbg_newwithbyteoffsetandlength_9fb2f11355ecadf5","__wbg_new_537b7341ce90bb31","__wbg_set_17499e8aa4003ebd","__wbg_newwithlength_b56c882b57805732","__wbg_subarray_7526649b91a252a6","__wbindgen_object_clone_ref","__wbindgen_debug_string","__wbindgen_throw","__wbindgen_memory","__wbindgen_closure_wrapper843","dtor","state","real","__wbindgen_export_2","get","makeMutClosure","encodeText","factory","alphabet","codeBuf","codec","char","indexOf","baseX","Base","rfc4648","decodeText","constants","names","reduce","prev","tupple","codes","concat","encoding","nameOrCode","hasOwnProperty","validEncode","enc","data","prefix","includes","toLowerCase","substring","isEncoded","err","encodingFromData","freeze","bitsPerChar","input","pad","mask","out","bits","end","SyntaxError","textDecoder","textEncoder","bytes","text","arrs","output","arr","baseTable","varint","uint8ArrayConcat","util","nameToVarint","constantToCode","nameToCode","codeToName","getNameFromData","prefixedData","getNameFromCode","getCodeFromName","getCodeFromData","getVarintFromName","getVarintFromCode","varintEncode","addPrefix","multicodecStrOrCode","varintUint8ArrayEncode","rmPrefix","getCodec","getName","getNumber","getCode","getCodeVarint","getVarint","codecName","toUpperCase","replace","uint8ArrayToString","fromString","uint8ArrayFromString","uint8ArrayToNumber","parseInt","numberToUint8Array","num","hexString","randomUUID","bind","rnds8","rng","byteToHex","rnds","random","unsafeStringify","res","shift","counter","l","RangeError","REST","pow","MSB","Number","MAX_SAFE_INTEGER","oldOffset","INT","MSBALL","encodingLength","N1","N2","N3","N4","N5","N6","N7","N8","N9","exists","instance","checkFinished","destroyed","finished","lengths","min","outputLen","u8a","createView","DataView","Uint32Array","toBytes","Hash","clone","_cloneInto","hashCons","hashC","update","digest","tmp","blockLen","SHA2","padOffset","isLE","super","pos","take","dataView","roundClean","digestInto","setBigUint64","_32n","BigInt","_u32_max","wh","wl","h","setUint32","oview","outLen","destroy","U32_MASK64","fromBig","n","le","lst","Ah","Al","_l","s","Bh","Bl","Cl","low","Ch","Dl","Dh","Eh","El","SHA512_Kh","SHA512_Kl","map","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","getUint32","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","_1n","_2n","padStart","hex","hexToNumber","array","hexByte","byte","isNaN","reverse","title","expectedLength","arrays","r","sum","forEach","validatorFns","bigint","function","boolean","stringOrUint8Array","isSafeInteger","field","object","Fp","isValid","hash","validateObject","validators","optValidators","checkField","fieldName","isOptional","checkVal","String","entries","_3n","_4n","_5n","_8n","power","modulo","invert","number","y","u","v","q","m","FIELD_FIELDS","nLength","nBitLength","_nBitLength","nByteLength","ceil","VERIFY_DEFAULT","zip215","twistedEdwards","curveDef","CURVE","curve","opts","ORDER","MASK","BYTES","BITS","Gx","Gy","p","validateBasic","d","randomBytes","adjustScalarBytes","domain","uvRatio","mapToCurve","validateOpts","CURVE_ORDER","prehash","cHash","cofactor","modP","sqrt","inv","ctx","phflag","inBig","inRange","max","in0MaskRange","assertInRange","assertGE0","pointPrecomputes","Map","isPoint","other","Point","ex","ey","ez","et","toAffine","fromAffine","normalizeZ","points","toInv","invertBatch","_setWindowSize","windowSize","_WINDOW_SIZE","delete","assertValidity","is0","X","Y","Z","T","X2","Y2","Z2","Z4","aX2","equals","X1","Y1","Z1","X1Z2","X2Z1","Y1Z2","Y2Z1","ZERO","negate","double","A","B","C","D","x1y1","E","G","F","H","X3","Y3","T3","Z3","add","T1","T2","subtract","wNAF","wnaf","wNAFCached","multiply","scalar","multiplyUnsafe","I","unsafeLadder","isSmallOrder","isTorsionFree","iz","z","ax","ay","zz","clearCofactor","fromHex","normed","lastByte","y2","isXOdd","isLastByteOdd","fromPrivateKey","privKey","getExtendedPublicKey","point","toRawBytes","toHex","c","constTimeNegate","condition","item","neg","W","windows","elm","precomputeWindow","base","precomputes","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","P","precomputesMap","transform","comp","modN","modN_LE","key","hashed","head","pointBytes","hashDomainToScalar","context","msgs","verifyOpts","getPublicKey","sign","R","verify","sig","publicKey","SB","k","ExtendedPoint","utils","randomPrivateKey","precompute","ED25519_P","ED25519_SQRT_M1","_10n","_20n","_40n","_80n","bitLen","redef","sqrtP","p1div4","root","eql","sqr","c1","n2","mul","nv","sub","ONE","legendreC","Q","S","Q1div2","t2","ge","tonelliShanks","FpSqrt","isOdd","lhs","rhs","FpPow","div","sqrN","addN","subN","mulN","nums","lastMultiplied","acc","inverted","reduceRight","FpInvertBatch","cmov","fromBytes","Field","ed25519Defaults","bytesLength","v3","v7","b2","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","ed25519_pow_2_252_3","vx2","root1","root2","useRoot1","useRoot2","noRoot","ed25519","edwardsToMontgomeryPub","edwardsPub","edwardsToMontgomeryPriv","edwardsPriv","ELL2_C1","FpSqrtEven","allocUnsafe","Buffer","curr","decoder","encoder","asUint8Array","coerce","o","Encoder","baseEncode","Decoder","baseDecode","codePointAt","prefixCodePoint","or","ComposedDecoder","decoders","keys","left","right","Codec","identity","base2","base8","base10","base16","base16upper","base32","base32upper","base32pad","base32padupper","base32hex","base32hexupper","base32hexpad","base32hexpadupper","base32z","base36","base36upper","base58btc","base58flickr","base64","base64pad","base64url","base64urlpad","alphabetBytesToChars","alphabetCharsToBytes","base256emoji","byts","byt","encodeTo","int","target","sizeOffset","digestOffset","Digest","Hasher","sha","async","subtle","sha256","sha512","Symbol","toStringTag","for","bases","createCodec","ascii","fromCharCode","alloc","utf8","latin1","binary"],"sourceRoot":""}